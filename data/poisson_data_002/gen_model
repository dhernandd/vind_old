ccopy_reg
_reconstructor
p1
(cObservationModels
PoissonObsTSGM
p2
c__builtin__
object
p3
NtRp4
(dp5
S'yDim'
p6
I10
sS'xDim'
p7
I2
sS'common_lat'
p8
I01
sS'lat_ev_model'
p9
g1
(cLatEvModels
LocallyLinearEvolution
p10
g3
NtRp11
(dp12
S'Q0Chol'
p13
g1
(ctheano.tensor.var
TensorVariable
p14
g3
NtRp15
(dp16
S'auto_name'
p17
S'auto_28'
p18
sS'index'
p19
I0
sS'tag'
p20
g1
(ctheano.gof.utils
scratchpad
p21
g3
NtRp22
(dp23
S'trace'
p24
(lp25
(lp26
(S'/Users/danielhernandez/Work/time_series/vae_nlds_rec_algo_v2/generate_data.py'
p27
I180
S'<module>'
p28
S'generate_fake_data()'
tp29
a(S'/Users/danielhernandez/Work/time_series/vae_nlds_rec_algo_v2/generate_data.py'
p30
I119
S'generate_fake_data'
p31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp32
a(S'/Users/danielhernandez/Work/time_series/vae_nlds_rec_algo_v2/LatEvModels.py'
p33
I64
S'__init__'
p34
S'self.Q0Chol = Tnla.matrix_inverse(self.Q0InvChol)'
tp35
aasbsS'name'
p36
NsS'owner'
p37
g1
(ctheano.gof.graph
Apply
p38
g3
NtRp39
(dp40
S'inputs'
p41
(lp42
g1
(ctheano.tensor.sharedvar
TensorSharedVariable
p43
g3
NtRp44
(dp45
g17
S'auto_27'
p46
sg19
Nsg20
g1
(g21
g3
NtRp47
(dp48
g24
(lp49
(lp50
(g27
I180
g28
S'generate_fake_data()'
tp51
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp52
a(g33
I63
g34
S"self.Q0InvChol = theano.shared(1.0*np.eye(xDim), 'Q0InvChol')"
tp53
aasbsS'container'
p54
g1
(ctheano.gof.link
Container
p55
g3
NtRp56
(dp57
g36
S'Q0InvChol'
p58
sS'storage'
p59
(lp60
cnumpy.core.multiarray
_reconstruct
p61
(cnumpy
ndarray
p62
(I0
tS'b'
tRp63
(I1
(I2
I2
tcnumpy
dtype
p64
(S'f8'
I0
I1
tRp65
(I3
S'<'
NNNI-1
I-1
I0
tbI00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
tbasS'strict'
p66
I00
sS'readonly'
p67
I00
sS'type'
p68
g1
(ctheano.tensor.type
TensorType
p69
g3
NtRp70
(dp71
S'broadcastable'
p72
(I00
I00
tp73
sS'dtype'
p74
S'float64'
p75
sS'numpy_dtype'
p76
g65
sS'sparse_grad'
p77
I00
sg36
NsbsS'allow_downcast'
p78
Nsbsg36
g58
sg37
Nsg68
g70
sbasg20
g1
(g21
g3
NtRp79
sS'outputs'
p80
(lp81
g15
asS'op'
p82
g1
(ctheano.tensor.nlinalg
MatrixInverse
p83
g3
NtRp84
sbsg68
g70
sbsS'nsamps'
p85
g1
(g14
g3
NtRp86
(dp87
g17
S'auto_18'
p88
sg19
I0
sg20
g1
(g21
g3
NtRp89
(dp90
g24
(lp91
(lp92
(g27
I180
g28
S'generate_fake_data()'
tp93
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp94
a(g33
I52
g34
S'self.nsamps = nsamps = self.x.shape[0]'
tp95
aasbsg36
Nsg37
g1
(g38
g3
NtRp96
(dp97
g41
(lp98
g1
(g14
g3
NtRp99
(dp100
g17
S'auto_16'
p101
sg19
I0
sg20
g1
(g21
g3
NtRp102
(dp103
g24
(lp104
(lp105
(g27
I180
g28
S'generate_fake_data()'
tp106
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp107
a(g33
I52
g34
S'self.nsamps = nsamps = self.x.shape[0]'
tp108
aasbsg36
Nsg37
g1
(g38
g3
NtRp109
(dp110
g41
(lp111
g1
(g14
g3
NtRp112
(dp113
g17
S'auto_11'
p114
sg19
Nsg20
g1
(g21
g3
NtRp115
(dp116
g24
(lp117
(lp118
(g27
I180
g28
S'generate_fake_data()'
tp119
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp120
a(g33
I49
g34
S"self.x = T.matrix('x')"
tp121
aasbsg36
S'x'
sg37
Nsg68
g1
(g69
g3
NtRp122
(dp123
g72
(I00
I00
tp124
sg74
S'float64'
p125
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp126
sg80
(lp127
g99
asg82
g1
(ctheano.compile.ops
Shape
p128
g3
NtRp129
sbsg68
g1
(g69
g3
NtRp130
(dp131
g72
(I00
tp132
sg74
S'int64'
p133
sg76
g64
(S'i8'
I0
I1
tRp134
(I3
S'<'
NNNI-1
I-1
I0
tbsg77
I00
sg36
Nsbsbag1
(ctheano.scalar.basic
ScalarConstant
p135
g3
NtRp136
(dp137
g17
S'auto_17'
p138
sg19
Nsg20
g1
(g21
g3
NtRp139
(dp140
g24
(lp141
(lp142
(g27
I180
g28
S'generate_fake_data()'
tp143
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp144
a(g33
I52
g34
S'self.nsamps = nsamps = self.x.shape[0]'
tp145
aasbsg36
Nsg68
g1
(ctheano.scalar.basic
Scalar
p146
g3
NtRp147
(dp148
g74
g133
sbsS'data'
p149
cnumpy.core.multiarray
scalar
p150
(g134
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp151
sbasg20
g1
(g21
g3
NtRp152
sg80
(lp153
g86
asg82
g1
(ctheano.tensor.subtensor
Subtensor
p154
g3
NtRp155
(dp156
S'idx_list'
p157
(g147
tp158
sbsbsg68
g1
(g69
g3
NtRp159
(dp160
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
NsbsbsS'Tbins'
p161
g1
(g14
g3
NtRp162
(dp163
g17
S'auto_21'
p164
sg19
I0
sg20
g1
(g21
g3
NtRp165
(dp166
g24
(lp167
(lp168
(g27
I180
g28
S'generate_fake_data()'
tp169
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp170
a(g33
I53
g34
S'self.Tbins = Tbins = self.X.shape[1]'
tp171
aasbsg36
Nsg37
g1
(g38
g3
NtRp172
(dp173
g41
(lp174
g1
(g14
g3
NtRp175
(dp176
g17
S'auto_19'
p177
sg19
I0
sg20
g1
(g21
g3
NtRp178
(dp179
g24
(lp180
(lp181
(g27
I180
g28
S'generate_fake_data()'
tp182
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp183
a(g33
I53
g34
S'self.Tbins = Tbins = self.X.shape[1]'
tp184
aasbsg36
Nsg37
g1
(g38
g3
NtRp185
(dp186
g41
(lp187
g1
(g14
g3
NtRp188
(dp189
g17
S'auto_12'
p190
sg19
Nsg20
g1
(g21
g3
NtRp191
(dp192
g24
(lp193
(lp194
(g27
I180
g28
S'generate_fake_data()'
tp195
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp196
a(g33
I50
g34
S"self.X = T.tensor3('X') if X is None else X"
tp197
aasbsg36
S'X'
sg37
Nsg68
g1
(g69
g3
NtRp198
(dp199
g72
(I00
I00
I00
tp200
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp201
sg80
(lp202
g175
asg82
g129
sbsg68
g130
sbag1
(g135
g3
NtRp203
(dp204
g17
S'auto_20'
p205
sg19
Nsg20
g1
(g21
g3
NtRp206
(dp207
g24
(lp208
(lp209
(g27
I180
g28
S'generate_fake_data()'
tp210
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp211
a(g33
I53
g34
S'self.Tbins = Tbins = self.X.shape[1]'
tp212
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp213
sbasg20
g1
(g21
g3
NtRp214
sg80
(lp215
g162
asg82
g1
(g154
g3
NtRp216
(dp217
g157
(g147
tp218
sbsbsg68
g1
(g69
g3
NtRp219
(dp220
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
NsbsbsS'Nsamps'
p221
g1
(g14
g3
NtRp222
(dp223
g17
S'auto_15'
p224
sg19
I0
sg20
g1
(g21
g3
NtRp225
(dp226
g24
(lp227
(lp228
(g27
I180
g28
S'generate_fake_data()'
tp229
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp230
a(g33
I51
g34
S'self.Nsamps = Nsamps = self.X.shape[0]'
tp231
aasbsg36
Nsg37
g1
(g38
g3
NtRp232
(dp233
g41
(lp234
g1
(g14
g3
NtRp235
(dp236
g17
S'auto_13'
p237
sg19
I0
sg20
g1
(g21
g3
NtRp238
(dp239
g24
(lp240
(lp241
(g27
I180
g28
S'generate_fake_data()'
tp242
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp243
a(g33
I51
g34
S'self.Nsamps = Nsamps = self.X.shape[0]'
tp244
aasbsg36
Nsg37
g1
(g38
g3
NtRp245
(dp246
g41
(lp247
g188
asg20
g1
(g21
g3
NtRp248
sg80
(lp249
g235
asg82
g129
sbsg68
g130
sbag1
(g135
g3
NtRp250
(dp251
g17
S'auto_14'
p252
sg19
Nsg20
g1
(g21
g3
NtRp253
(dp254
g24
(lp255
(lp256
(g27
I180
g28
S'generate_fake_data()'
tp257
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp258
a(g33
I51
g34
S'self.Nsamps = Nsamps = self.X.shape[0]'
tp259
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp260
sbasg20
g1
(g21
g3
NtRp261
sg80
(lp262
g222
asg82
g1
(g154
g3
NtRp263
(dp264
g157
(g147
tp265
sbsbsg68
g1
(g69
g3
NtRp266
(dp267
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
NsbsbsS'alpha'
p268
F0.29999999999999999
sS'totalA'
p269
g1
(g14
g3
NtRp270
(dp271
g17
S'auto_281'
p272
sg19
I0
sg20
g1
(g21
g3
NtRp273
(dp274
g24
(lp275
(lp276
(g27
I180
g28
S'generate_fake_data()'
tp277
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp278
a(g33
I90
g34
S'self.totalA = T.reshape(As, [Nsamps, Tbins-1, xDim, xDim])'
tp279
aasbsg36
Nsg37
g1
(g38
g3
NtRp280
(dp281
g41
(lp282
g1
(g14
g3
NtRp283
(dp284
g17
S'auto_252'
p285
sg19
I0
sg20
g1
(g21
g3
NtRp286
(dp287
g24
(lp288
(lp289
(g27
I180
g28
S'generate_fake_data()'
tp290
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp291
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp292
aasbsg36
Nsg37
g1
(g38
g3
NtRp293
(dp294
g41
(lp295
g1
(g14
g3
NtRp296
(dp297
g17
S'auto_192'
p298
sg19
I0
sg20
g1
(g21
g3
NtRp299
(dp300
g24
(lp301
(lp302
(g27
I180
g28
S'generate_fake_data()'
tp303
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp304
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp305
aasbsg36
Nsg37
g1
(g38
g3
NtRp306
(dp307
g41
(lp308
g1
(g14
g3
NtRp309
(dp310
g17
S'auto_190'
p311
sg19
I0
sg20
g1
(g21
g3
NtRp312
(dp313
g24
(lp314
(lp315
(g27
I180
g28
S'generate_fake_data()'
tp316
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp317
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp318
aasbsg36
Nsg37
g1
(g38
g3
NtRp319
(dp320
g41
(lp321
g1
(g14
g3
NtRp322
(dp323
g17
S'auto_189'
p324
sg19
I0
sg20
g1
(g21
g3
NtRp325
(dp326
g24
(lp327
(lp328
(g27
I180
g28
S'generate_fake_data()'
tp329
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp330
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp331
aasbsg36
Nsg37
g1
(g38
g3
NtRp332
(dp333
g41
(lp334
g1
(g14
g3
NtRp335
(dp336
g17
S'auto_142'
p337
sg19
I0
sg20
g1
(g21
g3
NtRp338
(dp339
g24
(lp340
(lp341
(g27
I180
g28
S'generate_fake_data()'
tp342
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp343
a(g33
I85
g34
S'Bs = Bs.reshape([Nsamps*(Tbins-1), xDim, xDim])'
tp344
aasbsg36
Nsg37
g1
(g38
g3
NtRp345
(dp346
g41
(lp347
g1
(g14
g3
NtRp348
(dp349
g17
S'auto_111'
p350
sg19
I0
sg20
g1
(g21
g3
NtRp351
(dp352
g24
(lp353
(lp354
(g27
I180
g28
S'generate_fake_data()'
tp355
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp356
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp357
a(S'/Users/danielhernandez/anaconda/lib/python2.7/site-packages/lasagne/layers/helper.py'
p358
I191
S'get_output'
p359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp360
a(S'/Users/danielhernandez/anaconda/lib/python2.7/site-packages/lasagne/layers/dense.py'
p361
I123
S'get_output_for'
p362
S'activation = activation + self.b'
tp363
aasbsg36
Nsg37
g1
(g38
g3
NtRp364
(dp365
g41
(lp366
g1
(g14
g3
NtRp367
(dp368
g17
S'auto_106'
p369
sg19
I0
sg20
g1
(g21
g3
NtRp370
(dp371
g24
(lp372
(lp373
(g27
I180
g28
S'generate_fake_data()'
tp374
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp375
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp376
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp377
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp378
aasbsg36
Nsg37
g1
(g38
g3
NtRp379
(dp380
g41
(lp381
g1
(g14
g3
NtRp382
(dp383
g17
S'auto_105'
p384
sg19
I0
sg20
g1
(g21
g3
NtRp385
(dp386
g24
(lp387
(lp388
(g27
I180
g28
S'generate_fake_data()'
tp389
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp390
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp391
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp392
a(g361
I124
g362
S'return self.nonlinearity(activation)'
tp393
a(S'/Users/danielhernandez/anaconda/lib/python2.7/site-packages/lasagne/nonlinearities.py'
p394
I44
S'softmax'
p395
S'return theano.tensor.nnet.softmax(x)'
tp396
aasbsg36
Nsg37
g1
(g38
g3
NtRp397
(dp398
g41
(lp399
g1
(g14
g3
NtRp400
(dp401
g17
S'auto_104'
p402
sg19
I0
sg20
g1
(g21
g3
NtRp403
(dp404
g24
(lp405
(lp406
(g27
I180
g28
S'generate_fake_data()'
tp407
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp408
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp409
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp410
a(g361
I123
g362
S'activation = activation + self.b'
tp411
aasbsg36
Nsg37
g1
(g38
g3
NtRp412
(dp413
g41
(lp414
g1
(g14
g3
NtRp415
(dp416
g17
S'auto_99'
p417
sg19
I0
sg20
g1
(g21
g3
NtRp418
(dp419
g24
(lp420
(lp421
(g27
I180
g28
S'generate_fake_data()'
tp422
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp423
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp424
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp425
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp426
aasbsg36
Nsg37
g1
(g38
g3
NtRp427
(dp428
g41
(lp429
g1
(g14
g3
NtRp430
(dp431
g17
S'auto_98'
p432
sg19
I0
sg20
g1
(g21
g3
NtRp433
(dp434
g24
(lp435
(lp436
(g27
I180
g28
S'generate_fake_data()'
tp437
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp438
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp439
aasbsg36
Nsg37
g1
(g38
g3
NtRp440
(dp441
g41
(lp442
g1
(g14
g3
NtRp443
(dp444
g17
S'auto_76'
p445
sg19
I0
sg20
g1
(g21
g3
NtRp446
(dp447
g24
(lp448
(lp449
(g27
I180
g28
S'generate_fake_data()'
tp450
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp451
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp452
aasbsg36
Nsg37
g1
(g38
g3
NtRp453
(dp454
g41
(lp455
g188
ag1
(g135
g3
NtRp456
(dp457
g17
S'auto_75'
p458
sg19
Nsg20
g1
(g21
g3
NtRp459
(dp460
g24
(lp461
(lp462
(g27
I180
g28
S'generate_fake_data()'
tp463
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp464
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp465
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\xff\xff\xff\xff\xff\xff\xff\xff'
tRp466
sbasg20
g1
(g21
g3
NtRp467
sg80
(lp468
g443
asg82
g1
(g154
g3
NtRp469
(dp470
g157
(c__builtin__
slice
p471
(NNNtRp472
g471
(Ng147
NtRp473
g471
(NNNtRp474
tp475
sbsbsg68
g1
(g69
g3
NtRp476
(dp477
g72
(I00
I00
I00
tp478
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp479
(dp480
g17
S'auto_93'
p481
sg19
I0
sg20
g1
(g21
g3
NtRp482
(dp483
g24
(lp484
(lp485
(g27
I180
g28
S'generate_fake_data()'
tp486
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp487
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp488
aasbsg36
Nsg37
g1
(g38
g3
NtRp489
(dp490
g41
(lp491
g1
(g14
g3
NtRp492
(dp493
g17
S'auto_85'
p494
sg19
I0
sg20
g1
(g21
g3
NtRp495
(dp496
g24
(lp497
(lp498
(g27
I180
g28
S'generate_fake_data()'
tp499
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp500
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp501
aasbsg36
Nsg37
g1
(g38
g3
NtRp502
(dp503
g41
(lp504
g222
ag1
(g14
g3
NtRp505
(dp506
g17
S'auto_81'
p507
sg19
I0
sg20
g1
(g21
g3
NtRp508
(dp509
g24
(lp510
(lp511
(g27
I180
g28
S'generate_fake_data()'
tp512
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp513
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp514
aasbsg36
Nsg37
g1
(g38
g3
NtRp515
(dp516
g41
(lp517
g162
ag1
(ctheano.tensor.var
TensorConstant
p518
g3
NtRp519
(dp520
g17
S'auto_77'
p521
sg19
Nsg20
g1
(g21
g3
NtRp522
(dp523
g24
(lp524
(lp525
(g27
I180
g28
S'generate_fake_data()'
tp526
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp527
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp528
aasS'unique_value'
p529
Nsbsg36
NsS'cached'
p530
I01
sg68
g1
(g69
g3
NtRp531
(dp532
g72
(tsg74
S'int8'
p533
sg76
g64
(S'i1'
I0
I1
tRp534
(I3
S'|'
NNNI-1
I-1
I0
tbsg77
I00
sg36
Nsbsg149
g61
(g62
(I0
tS'b'
tRp535
(I1
(tg534
I00
S'\x01'
tbsbasg20
g1
(g21
g3
NtRp536
sg80
(lp537
g505
asg82
g1
(ctheano.tensor.elemwise
Elemwise
p538
g3
NtRp539
(dp540
S'__module__'
p541
S'tensor'
p542
sS'scalar_op'
p543
g1
(ctheano.scalar.basic
Sub
p544
g3
NtRp545
(dp546
S'output_types_preference'
p547
ctheano.scalar.basic
upcast_out_nobool
p548
sg36
S'sub'
p549
sbsg36
S'Elemwise{sub,no_inplace}'
p550
sS'destroy_map'
p551
(dp552
sS'nfunc_spec'
p553
(S'subtract'
I2
I1
tp554
sS'inplace_pattern'
p555
g1
(ctheano.misc.frozendict
frozendict
p556
g3
NtRp557
(dp558
S'_hash'
p559
I0
sS'_dict'
p560
(dp561
sbsS'openmp'
p562
I00
sS'__doc__'
p563
S"elementwise subtraction\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p564
sbsbsg68
g1
(g69
g3
NtRp565
(dp566
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp567
sg80
(lp568
g492
asg82
g1
(g538
g3
NtRp569
(dp570
g541
g542
sg543
g1
(ctheano.scalar.basic
Mul
p571
g3
NtRp572
(dp573
g547
ctheano.scalar.basic
upcast_out
p574
sg36
S'mul'
p575
sbsg36
S'Elemwise{mul,no_inplace}'
p576
sg551
(dp577
sg553
(S'multiply'
p578
I2
I1
tp579
sg555
g1
(g556
g3
NtRp580
(dp581
g559
I0
sg560
(dp582
sbsg562
I00
sg563
S"elementwise multiplication\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p583
sbsbsg68
g1
(g69
g3
NtRp584
(dp585
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp586
(dp587
g17
S'auto_92'
p588
sg19
I0
sg20
g1
(g21
g3
NtRp589
(dp590
g24
(lp591
(lp592
(g27
I180
g28
S'generate_fake_data()'
tp593
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp594
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp595
aasbsg36
Nsg37
g1
(g38
g3
NtRp596
(dp597
g41
(lp598
g1
(g518
g3
NtRp599
(dp600
g17
S'auto_51'
p601
sg19
Nsg20
g1
(g21
g3
NtRp602
(dp603
g24
(lp604
(lp605
(g27
I180
g28
S'generate_fake_data()'
tp606
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp607
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp608
aasg529
Nsbsg36
Nsg530
I01
sg68
g1
(g69
g3
NtRp609
(dp610
g72
(tsg74
S'int8'
p611
sg76
g534
sg77
I00
sg36
Nsbsg149
g61
(g62
(I0
tS'b'
tRp612
(I1
(tg534
I00
S'\x02'
tbsbasg20
g1
(g21
g3
NtRp613
sg80
(lp614
g586
asg82
g1
(g538
g3
NtRp615
(dp616
g541
S'tensor.basic'
p617
sg36
Nsg543
g1
(ctheano.scalar.basic
Cast
p618
g3
NtRp619
(dp620
g547
g1
(ctheano.scalar.basic
specific_out
p621
g3
NtRp622
(dp623
S'spec'
p624
(g147
tp625
sbsS'o_type'
p626
g147
sg36
S'convert_to_int64'
p627
sS'ctor'
p628
cnumpy
int64
p629
sbsg551
(dp630
sg553
Nsg555
g1
(g556
g3
NtRp631
(dp632
g559
I0
sg560
(dp633
sbsS'__oplist_tags'
p634
(lp635
S'casting'
p636
asg562
I00
sbsbsg68
g1
(g69
g3
NtRp637
(dp638
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp639
sg80
(lp640
g479
asg82
g1
(ctheano.tensor.opt
MakeVector
p641
g3
NtRp642
(dp643
g74
S'int64'
p644
sbsbsg68
g1
(g69
g3
NtRp645
(dp646
g72
(I00
tp647
sg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp648
sg80
(lp649
g430
asg82
g1
(ctheano.tensor.basic
Reshape
p650
g3
NtRp651
(dp652
S'ndim'
p653
I2
sbsbsg68
g1
(g69
g3
NtRp654
(dp655
g72
(I00
I00
tp656
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g43
g3
NtRp657
(dp658
g17
S'auto_34'
p659
sg19
Nsg20
g1
(g21
g3
NtRp660
(dp661
g24
(lp662
(lp663
(g27
I180
g28
S'generate_fake_data()'
tp664
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp665
a(g33
I81
g34
S"NNEvolve = lasagne.layers.DenseLayer(NNEvolve, evnodes, nonlinearity=softmax, W=lasagne.init.Orthogonal(), name=nnname+'_HL1')"
tp666
a(S'/Users/danielhernandez/anaconda/lib/python2.7/site-packages/lasagne/layers/dense.py'
p667
I103
g34
S'self.W = self.add_param(W, (num_inputs, num_units), name="W")'
tp668
a(S'/Users/danielhernandez/anaconda/lib/python2.7/site-packages/lasagne/layers/base.py'
p669
I234
S'add_param'
p670
S'param = utils.create_param(spec, shape, name)'
tp671
a(S'/Users/danielhernandez/anaconda/lib/python2.7/site-packages/lasagne/utils.py'
p672
I355
S'create_param'
p673
S'spec = theano.shared(spec, broadcastable=bcast)'
tp674
aasbsg54
g1
(g55
g3
NtRp675
(dp676
g36
Nsg59
(lp677
g61
(g62
(I0
tS'b'
tRp678
(I1
(I2
I60
tg65
I00
S'\x85;x\x8a$\xc8\xb9\xbf@$z\x87\xc7\xad\xc0?\xff\xb4j\x05\xc6p\xc4\xbf\xf4\x90\xf7v\xa4\xfa\xae\xbfw\xe2\xdb{l\x06\x95\xbf\x1c\xfb\xdd\x02\xcd\xea\xa9?\xca\xd4\x95\xcaO2\xd1?\x08}\x00\x96\xea\xf6\xaa\xbf\x81\xc3ZF\x8d\xb2\xae?\xdbYy\xdc\x9c\xa4\xb3?b\xe5\xb1\xc8\xae\x17\x98?a\x93zf01\xc8?uRz\xd1~\x10\x9e\xbf\xcc\xd9\xd31\x96\'\x98\xbf\x86\x0c\x93\xb0s\x05\xa8\xbf\xfavpy\x9a\n\xbf?l\x98_\xd7\x87\x8a\xb6?\xbf\xe8\xbc\xa8 \xb4\xaa\xbf\xdc[\x7f4aK\xb0?\x8d\x8aI#\xbc\x88\xaf?C\xe2\x0e\xce}\x91\xa7\xbf\x8eU5F\x9cx\xb8?[H\x8d\x9d\x1c\r\xcd?\xcc\x14\xcb\x13.\x9d\x95\xbfv\xc2\xafP\xe3\x08\x99?\x9a\x16\xda\xa0\x06\x01\xc6?p\xd2Zm(\xbf\xa6\xbf\xb47qn\xef\x87\x85?\xc46\xc5\xe4\xf2g\xba?\xbe\xddM\xbdMb\xd1\xbf\xdbB\xa1\xf3\x10}\x99\xbf\x16A\xd4\xd8\xf4\xa7\xa1\xbf\xfe\x91\xc7\xee\x9b\xb0\xba?\x02\xe8\xc3N\xb7\xc5\xbb?~\xe9\xbd\xce]A\x80?\x8b\x85$\xe3h\xc7\xbd\xbfvz\x94{\xa0T\xc8?T\x14\xd9{\xe3\x85\xd6\xbfT3\xd4\xf0\xa5\x0f\xc5?\xbc2\x9d9\x10\xa1\x9a?\x82`\x1b\xc8\xaf\x06\xc2\xbf\xa5\xc2\xc3d\x02e\xa2\xbfhB\xe9\xf6O\x81\xa0?\x9c\xc6\xee\x936"o?h\x0e\xf9\xfcH\xdc\xc2?\xff9\xb0\xd4\xff\xf6\xa7\xbf\x10\xf5\xdc\x8f\x85n\xaf?\xc6\xf5j"\x02\xc9\xb2?\xa6F\x13\xb96(\xc6?\xbaB\xd6B\x1e\xfc\xa0\xbf\x9870\x7fO\xcct?^6\x14Y\x80A\xb5\xbfDP\xcf\xac1\x0f\xd0\xbf\xda\xf0g\xb5\xf4\xa6\xc5?\xb5_{9\x8d#\xac\xbf^\x19H\xc9\x02\xa0\xad?I|\xdai\xe3\x93\xbf?C\x85\xea\xc5B\xb7\xbc\xbf\xc0/O\x92B\xc5\xd6?N\xbd\x1b\x94\xc0\xf5\xc6\xbf\x93%\xaaJI\xc7\xbb\xbf\x12\x97xs\x1c\xe8\xcb\xbf\x14\xb2\xca",\xe0\xb4\xbfk9\xde\x08\xcb\x84\xcc?\x85d\xff\'\x8b\x04\xbd?\xcd\xc6\xf9\xbc\xaal\xb8\xbf\xf0\xc5\x06Y\xa4\x8a\x9a?\x9c\xcax\xe7\x04q\xa3\xbf\x87t,\xbd*\x97\xa0?\xae`\xad\xbe\xc0\x82\xa4?\n\xa0~\x94\xea\xcb\x8e?)8f\x00/\xd5\xbe?\xb4\xbb\xf6&\xc4J\xa6\xbf?\x89!\xc9\xb0z\xbf\xbf\xbc\xbb3\x1b&\xed\xc6\xbf0\xc3\xf73PY\xc1?\xbb\xb4\xb47\xf5.\xc3?V\xb2[k\xa98\xad\xbf\xecI\xbb\xc1\xa9\x88\x9f?z\x04,\xea\xe0\x1b\xb2?^zl\xa2\x0bH\xc0\xbf\xe6\xfa5\xdc\xa0\x01\xc9?X\x13\xf6GYn\xb8?\x03@\xab\x13D\x1c\xba?\x00\x13m7\x1f\xe5\xac\xbf\xa1\x0fR\xd2\xb5\x8e\xa6?\x10*\xe8\xe3=\xc3\xa3?\xd8\xb9\xb4:p\xda\xc2?\x14\x1d\xba!\xd6M\xc1?\xa6)\xb3\xeajX\xcd?\x90\xa0\xeb*\x7fq\xc0?w0\x8e\xac\x7fz\xbd?\x168\xef\xea\x97\xd1\xc1\xbf\xcb(\x1el4h\xc0?\xe6u\xdahC{\x82?\xf9\xca\xa2\xb4w\xbc\xa4?\x98\x14P_RE\xb7\xbfwk)8\x1f\xbd\xc8?Kw\xa7k\xbf\x0c\xc7?\xcd\x11\x03\xfcry\xc4?\xd5\x86d\xa8\xc4?\xa9?0"M\x85\x8a\xcd\x84\xbff7\x1f\xaa2H\xbe?\x91)\xcf\xfb\xc9\x98\xa4?\x92\xef\xadD\xa3\t\xb5\xbfU\xff\x14\x06\t2\x90\xbfb\xf0i\x8492\xaf?o\xb6\xe4\xc5\x8a\x89\xc7?l\xee\xd7\x83\x9c\xfd\xb7\xbfZ\x13\xdf\xef\x97a\xd0\xbf\xa0\x1c\xc59\xe56\x94?|\xfd\xd6\xa3v\x80\xbc?*\xddF\x8cF\x06\xcf\xbfh\x97\xe2#\x11\x11\xc1?\xdc7Y\xb1\xa9\xe1\xc1\xbf\xc9\xce\xb9g\xca\x1c\xb7\xbf\xfd\xa8\x07\x1f2l\xd4\xbfEJ\xbf\xb4T\x1c\xc2\xbf\xd7ao\x8d\xc81\xb2\xbf\x89\xaf\x90[C\xa9\xc1?'
tbasg66
I00
sg67
I00
sg68
g1
(g69
g3
NtRp679
(dp680
g72
(I00
I00
tp681
sg74
S'float64'
p682
sg76
g65
sg77
I00
sg36
Nsbsg78
Nsbsg36
S'Ev_HL1.W'
p683
sg37
Nsg68
g679
sbasg20
g1
(g21
g3
NtRp684
sg80
(lp685
g415
asg82
g1
(ctheano.tensor.basic
Dot
p686
g3
NtRp687
sbsg68
g1
(g69
g3
NtRp688
(dp689
g72
(I00
I00
tp690
sg74
S'float64'
p691
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp692
(dp693
g17
S'auto_103'
p694
sg19
I0
sg20
g1
(g21
g3
NtRp695
(dp696
g24
(lp697
(lp698
(g27
I180
g28
S'generate_fake_data()'
tp699
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp700
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp701
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp702
a(g361
I123
g362
S'activation = activation + self.b'
tp703
aasbsg36
Nsg37
g1
(g38
g3
NtRp704
(dp705
g41
(lp706
g1
(g43
g3
NtRp707
(dp708
g17
S'auto_35'
p709
sg19
Nsg20
g1
(g21
g3
NtRp710
(dp711
g24
(lp712
(lp713
(g27
I180
g28
S'generate_fake_data()'
tp714
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp715
a(g33
I81
g34
S"NNEvolve = lasagne.layers.DenseLayer(NNEvolve, evnodes, nonlinearity=softmax, W=lasagne.init.Orthogonal(), name=nnname+'_HL1')"
tp716
a(g667
I108
g34
S'regularizable=False)'
tp717
a(g669
I234
g670
S'param = utils.create_param(spec, shape, name)'
tp718
a(g672
I355
g673
S'spec = theano.shared(spec, broadcastable=bcast)'
tp719
aasbsg54
g1
(g55
g3
NtRp720
(dp721
g36
Nsg59
(lp722
g61
(g62
(I0
tS'b'
tRp723
(I1
(I60
tg65
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg66
I00
sg67
I00
sg68
g1
(g69
g3
NtRp724
(dp725
g72
(I00
tp726
sg74
S'float64'
p727
sg76
g65
sg77
I00
sg36
Nsbsg78
Nsbsg36
S'Ev_HL1.b'
p728
sg37
Nsg68
g724
sbasg20
g1
(g21
g3
NtRp729
sg80
(lp730
g692
asg82
g1
(ctheano.tensor.elemwise
DimShuffle
p731
g3
NtRp732
(dp733
S'input_broadcastable'
p734
g726
sS'shuffle'
p735
(lp736
I0
asS'augment'
p737
(lp738
I0
asS'drop'
p739
(lp740
sS'inplace'
p741
I01
sS'new_order'
p742
(S'x'
I0
tp743
sS'view_map'
p744
(dp745
I0
(lp746
I0
assbsbsg68
g1
(g69
g3
NtRp747
(dp748
g72
(I01
I00
tp749
sg74
g727
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp750
sg80
(lp751
g400
asg82
g1
(g538
g3
NtRp752
(dp753
g541
g542
sg543
g1
(ctheano.scalar.basic
Add
p754
g3
NtRp755
(dp756
g547
g574
sg36
S'add'
p757
sbsg36
S'Elemwise{add,no_inplace}'
p758
sg551
(dp759
sg553
(S'add'
p760
I2
I1
tp761
sg555
g1
(g556
g3
NtRp762
(dp763
g559
I0
sg560
(dp764
sbsg562
I00
sg563
S"elementwise addition\n\n    Generalizes a scalar op to tensors.\n\n    All the inputs must have the same number of dimensions. When the\n    Op is performed, for each dimension, each input's size for that\n    dimension must be the same. As a special case, it can also be 1\n    but only if the input's broadcastable flag is True for that\n    dimension. In that case, the tensor is (virtually) replicated\n    along that dimension to match the size of the others.\n\n    The dtypes of the outputs mirror those of the scalar Op that is\n    being generalized to tensors. In particular, if the calculations\n    for an output are done inplace on an input, the output type must\n    be the same as the corresponding input type (see the doc of\n    scalar.ScalarOp to get help about controlling the output type)\n\n    Parameters\n    ----------\n    scalar_op\n        An instance of a subclass of scalar.ScalarOp which works uniquely\n        on scalars.\n    inplace_pattern\n        A dictionary that maps the index of an output to the\n        index of an input so the output is calculated inplace using\n        the input's storage. (Just like destroymap, but without the lists.)\n    nfunc_spec\n        Either None or a tuple of three elements,\n        (nfunc_name, nin, nout) such that getattr(numpy, nfunc_name)\n        implements this operation, takes nin inputs and nout outputs.\n        Note that nin cannot always be inferred from the scalar op's\n        own nin field because that value is sometimes 0 (meaning a\n        variable number of inputs), whereas the numpy function may\n        not have varargs.\n\n    Note\n    ----\n    | Elemwise(add) represents + on tensors (x + y)\n    | Elemwise(add, {0 : 0}) represents the += operation (x += y)\n    | Elemwise(add, {0 : 1}) represents += on the second argument (y += x)\n    | Elemwise(mul)(rand(10, 5), rand(1, 5)) the second input is completed along the first dimension to match the first input\n    | Elemwise(true_div)(rand(10, 5), rand(10, 1)) same but along the second dimension\n    | Elemwise(int_div)(rand(1, 5), rand(10, 1)) the output has size (10, 5)\n    | Elemwise(log)(rand(3, 4, 5))\n\n    "
p765
sbsbsg68
g1
(g69
g3
NtRp766
(dp767
g72
(I00
I00
tp768
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp769
sg80
(lp770
g382
asg82
g1
(ctheano.tensor.nnet.nnet
Softmax
p771
g3
NtRp772
sbsg68
g766
sbag1
(g43
g3
NtRp773
(dp774
g17
S'auto_36'
p775
sg19
Nsg20
g1
(g21
g3
NtRp776
(dp777
g24
(lp778
(lp779
(g27
I180
g28
S'generate_fake_data()'
tp780
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp781
a(g33
I82
g34
S"self.NNEvolve = lasagne.layers.DenseLayer(NNEvolve, xDim**2, nonlinearity=linear, W=lasagne.init.Uniform(0.9), name=nnname+'_OL')"
tp782
a(g667
I103
g34
S'self.W = self.add_param(W, (num_inputs, num_units), name="W")'
tp783
a(g669
I234
g670
S'param = utils.create_param(spec, shape, name)'
tp784
a(g672
I355
g673
S'spec = theano.shared(spec, broadcastable=bcast)'
tp785
aasbsg54
g1
(g55
g3
NtRp786
(dp787
g36
Nsg59
(lp788
g61
(g62
(I0
tS'b'
tRp789
(I1
(I60
I4
tg65
I00
S'~\x04\xf0\x1a\x18\x99\xdd?p\xa3\nu\xdc\xa7\xad\xbf\x19\xc6D\x7f\x15\xa6\xe4?\x1f\x1fL\xed\x1bz\xdc\xbf\xa4\xcen\xa7\x18E\xc9\xbf\x91]\xac1\t\r\xe4\xbf\xdd\x17D\xc5\xb8\xdb\xe1?\x88\xa1\\\xf7x\xf9\xcc\xbf@\xf0\xff\xcf\x01n\xa6\xbf\xd4_U.\x1d\xef\xc5?\xe2\x8e\xa5\x97G\x02\xd7\xbf4/\xa4K\xa6f\xc7?\x8c\x00\xd6z\x8d\x03\xc2?\x91Z\xb8#e\xca\xe4?\x84I\xdc\xca\xc5\x02\xd8\xbf\x87\xd2bf\x1dN\xe0?j\xc1\xd9\x8a\xb4t\xe9\xbf\x08R\x01\x1ah>\xc6\xbf|\xbe\xfe\xc7pU\xc4\xbf\xe7?\xa6?\xa5\x0b\xe6?\x04\xb2A\xd5]D\xd2\xbf\r\xcc\xe7\xc4\xc8\xf1\xea\xbf\x1d\xb0\x94g\xe1@\xe5?7M\x10\xf2wV\xea?\xe60\xb7\x83\xef\xfc\xd1?@s\xee\xae\xef7\xe5\xbf\xf1\xa3\xf2\xc7\x01:\xe5\xbf\xa8\xa5\xf7\x11Cg\xb3\xbf\xab\x82\xdd+\'=\xea?~\x96qN|F\xdf?\xa4k(LW\xb8\xc1?\x04\xa3y\xba\xf6\x16\xcb\xbf\x9e,<\x8a\xf4y\xeb\xbf\x87\xa7\xf0:f\xc8\xe6?\xbbO\xde\x14\x01\x82\xea\xbf\xcc(8w\xf8\x98\xcf?\x80!\x94\x07\xc2P\x87?)\xec\xe4]\x99\xf7\xeb\xbf\x90d\xdd\xd0\x7f\xc4\xc0\xbf\xaa\xed\xc0\xb7\x9f\xfc\xe6\xbf\xcd\xf5`eI\x82\xeb?\x80+\xafV\xbc)\x95?\xddG\xb3[\xe8\xc3\xe7?\x97\xd0\xd9}\xc9\xcc\xda\xbf\x00\x1f\xe8\xacD\xfc\xa5?\xe4\\a\x8a"\x89\xcb?\xfa\x94\xd4\x99cn\xe6\xbf\xe0S\xcf\xc8\x15\x89\xa4\xbfC\xc1\xa7\xf2\\@\xe9? \x94\x87\xdf\x02\xaf\xe7\xbf\xad\x10\xc6\xba4V\xe4?\x07\xc7\x19\xbb1\x9f\xe5\xbf\x00\xe4\xff\nU\x8eW?>oj\x8f\xcbf\xd0?z\\\x81Z\xdb\xbb\xd2?\x1eG0\xfel\x15\xd7?\xf8b`\xe9\xbc\xd4\xbc\xbf\x12\xb3\x8b\x950\x1b\xd6\xbf n\x91\xff\x96\xa5\xba\xbf\xb1~\x97%\xf3\xd9\xeb?\xd1\n/\xae\xc0\xf5\xe9\xbf\xf4u4F\x9b\xcb\xc9?\xa6$Yr\xb6u\xd5\xbf\xe0\xad\x82\xd2\x84\x0e\xa5\xbfx\xa9fKy\x10\xec\xbf\xeeg\xfd\x13n\x8b\xe0\xbf\xf3%\xb0/\xdc\x9d\xe3?d\x1e\xc2\xde>\xef\xc2?\xca\x82\xc5 \xd5`\xd7?\xc4\xb8{Dq\xb7\xe3\xbf~\x81\xac\xb3\x12-\xda?\xd6\x83\x93\xbf\x0f\x07\xd5?\xaf\x85R\xeb\xc6\x8c\xeb?\xdc\xb33\x10\xedE\xc5\xbfKQ\x12\xad\xcc\xb2\xe9?D\x87>\x84k\x84\xc5?A\xbd\xfa\x12\x06_\xe2\xbf\x91\x80\x08-\xd0\xc0\xe6?\x00X\xc8\x1c\x0c\xf7\x87\xbf<d\xca\x8aK\x9e\xcd\xbfGu\x8b\x0fJ9\xea?\x9f`\xf9\xa1KO\xec\xbf8\x8b\x07\x11\xf9d\xe6\xbfUkR\x0c\xd4\xaa\xe4?{\xcc\xb1\x8b\x18\xd7\xe4?L\xe3\xc9\x86\xa4{\xca\xbf\xeb\x92\x80\x1c\x05\x89\xe0\xbf\x80\xf8\x14j1x\xb7\xbf\x82\xf0\xcd\xa9YX\xd2?P\xd8m.\x07|\xa9\xbfB/\xa8o\xa1L\xd3\xbf\t}\n|\xccX\xe3?\x9c6;\xacE\xeb\xc4\xbf\xdd\xca\x07\xfd&\xe1\xe8?\xf1\x90\\\x82$\x80\xe6?\xc6\xc7\xdd\x14\x80Q\xe0\xbfm\xbf,\x990G\xeb?\x1fK\xa3@\xd6\xbf\xea?\xe5+\xd9\xb3\x81\xa8\xe8?\xc4\xa3&\xa8j\xfd\xcd?\xbf\x9e\x1d\x81\xae\x08\xec\xbfL%\xe0\x9e\xe6t\xc0\xbf,\x8a\xe6\x81\x7f\xea\xe0\xbfv\xfbD\xce\xe0\'\xde?H\xa8\xf1\xbe0\xce\xe2\xbf]r\xe3\xe5\x18[\xe9?\xe8&\xfe2\xfd\xb9\xbd?\xca;\x08\xb8N4\xd0?\x1a9\xd3\xc1\xe2\xfc\xe5\xbf\xb6\x16\x0c\xe2\xcd\xe9\xeb\xbfX)8\xb4\xb8R\xb3?$\x10A\x08\x82\x0c\xd6\xbf\xcc42$g\xd3\xd5\xbf\xf4N\x92bH\x95\xcb\xbf\r\xc6v\x91]\xf9\xea?\r\x9cEx\xe6\x0b\xe6\xbf\x0fw0s\xb2\xba\xe2?0\x19\xa9\xf1\xe5\xdf\xd2\xbf?\xe0\xfd\xd2\xdc\x03\xe5?\xba\x1e=\n\x12/\xd4?\xc80!\x9a\xd4>\xb4?^\xdc\xff\xce\xfa\xb8\xe1\xbf\xfc\x86\xc4\x84\x99\xe3\xdd\xbf`o\xa9\x076\x1a\xa8\xbf6\xb9\x84\xd9\xb4a\xd7\xbf&\xb2\x90\x1b\xbf\xef\xd8?~\x85\xd7Vt\xf4\xd0\xbf\xdb\xfb\x08\x07\x15Y\xe3?h\x11\xce\xad\x1f\x83\xd1\xbf;\x01n;}&\xe0?\xa5\xda\xe8\xf6\xa6\xcc\xd9\xbf\xaa\xb6\xadt\x02\x83\xd7?\x024M\xa3\xdb\x1f\xe2\xbf\x80\\\xcb_th\xaf\xbf\x1a\xb0\xb4\xb6AP\xd2\xbf<\xf2\x7f\xe4\xf2\xf5\xd7\xbf\xc5\x83\xe3\xbbK\x1a\xe4?\xd4\t\xb0\xb3\xac\xa6\xcf?\xa7\x18\x1dj\xe2\xdb\xe7?\xeb\xb1%?\xd3X\xdb\xbf\xf0pE\xd0b\x0c\xe8\xbf\x88D\x94\xc3\x1d-\xe9\xbf~T\xeb\xed4a\xd2?\xf9\x01O\x86\x8e\xe3\xe1\xbf\x1f?\x01 \x83t\xeb\xbf\x0cb\x86(\x17\x85\xc8\xbf\'b[sX\xe8\xe3?\xe9\x02r\xcc\xe4\xe2\xe6?\xd9\xf6\x0c(|\x84\xec?I\x1c,#b\x9e\xea\xbf \x01k\xa5d\x8d\xb1?0|.m{\xad\xb6\xbf q?8"\xe5\xd4\xbf\xa0[r\xa1t\xb3\xa2?-z\x7f\x90\xb3\x1a\xe4?,\xd6\x03\x1di&\xc9?\x92\xe0\xb5\x99Ol\xe5\xbfX:A1\xed\x97\xc1\xbfJO\xd2\xfd\xaa\x9b\xd2?\xf0Jn\tdm\xad?\xfa\xa70\x138\xf8\xd1?\x8d\xa0\xbb\xa2g\xbd\xe9?{\xe9\x1d\xc7\t\x82\xdd\xbf\xf4\xb1\x16n\xf4\x98\xcb\xbf\xba\xa9\xc2}\xfff\xd0?\xd7\x9a\xcd>\xe4\xd0\xeb?\x9e\xd3\x88\x9d#$\xda?\xc8\\\xff_\xf9g\xc2\xbf\xd6\xe3\xe3\xacn&\xd6?:\xdd\xd4\xc43\x81\xea\xbf\xf0bt\xc5\x96\xf0\xb0\xbfa|\xf7}P\x19\xe7\xbfy\xda0u\xe6S\xec?\x81\xb7\r\x8ci\xe8\xe5?*\xc0\xa9\x0e\xd4H\xd6?\xef\x10\xdf\xe1\xb9\xf5\xe9\xbf\xec\xbe\xd9\x12\x9ee\xd5\xbfo\xd9\x1b\x8a*\xd3\xe6?a\xddp\xa3>]\xe4?08\xdb\xb6\x90\xd3\xbc\xbf\x05/Y\xea\xea\xff\xe8?HX\x15\x1fv\xa1\xb2\xbfo\x81\xef\xf3y\x01\xe2?\x82\x90\xb8y\x13\xc6\xe1\xbf0\x891t\x913\xea\xbf^\xe1\x83\xf5\xb9\xfe\xd3?\xa1q\x05\xc0\x8d\xf2\xe8?\xa8\xb6U\xecBy\xc8\xbfo\x94\x04\xeeI]\xe9\xbf\x99\xed\xfc\xd8\xda\x15\xe8\xbf\x03\xfd\x9c4\x0f\x1f\xe1?\xad\xd1\xafxr\xdc\xe1\xbf\x1e\x9cZ\xba6z\xd3?\x00\x1c\x1a4r\x91t\xbf,\x8a\x11\xfc\xa7g\xca?\x10\xd9O|R\xf7\xdb\xbf\xf6\xb3~\xe3\x98\x0f\xe6\xbf\x86\xdd\x92\xb9\\\xe8\xdd?`\xd6a\xd9m+\xd8\xbf\xf4)\xdaebK\xcd?\xd5Q\xa4d\x17)\xe5?\x00\xcd\xcc/)\x16\x8f\xbf\xff7\xb7\x9a\n\xae\xe6?\x8cM~\xd9\xe0#\xc3?\x0b\x00\x14\x1b.\xa0\xe1?O\xda\x1bk\xb8O\xe4\xbfgG\xe27\xd7\xcb\xe0?J{\x15\x02\x8d5\xde?\xe7S\xa1\xae\x9e\x91\xe4?w\xf2D\xe4\xbfy\xeb?\xd0\x81s\xa4\xd9e\xb6\xbf\xd8p:\x00q\x88\xbc?=\xfe\xc0F]\x87\xe7?\xa5U\xf5\xadz\xb0\xeb\xbfT\xe3\x1b\xdcb\xae\xe1\xbfKh\xecpxE\xec\xbf\x97\xb0\xac\xfc#\xb1\xe3?.\x8d\x84\xa5 0\xd9?&\x00U\x13p\x9c\xd9?\xa0\xb1`\x13r\xfd\xb1?\xd6NH\x05\xde\xf3\xd7?\xc0"\x1e\x85j\xc9\xa1\xbf\x1c\x15[V \x04\xc1\xbf\xa5\xcf)pV\x8c\xe8?d\xffY`\n\xd8\xce?\xdc\xf9XZ\xf0z\xe4\xbf\xc7Z\xee\xab\x05`\xe4?\x8fg\xfcY\xed\xf3\xe9\xbf\xd2\xf5\xa5\x83\x8d\xc0\xd3?\xdc4\x80\x13\x81\x06\xc0?t\xdd\xccD\xa6\x17\xe2\xbf\xea\xe15\x0e?\xcd\xd5?\xe0\xbf\x01,\x8eB\xad\xbf!\xab\xbc)\x15\\\xea?Zr\xe9\xc5\x9c\x8d\xdc?\x83\xefj#\xb4\x12\xe8\xbf\xe0\xe3\x003J\x17\xa8?K\x15l\xb4\x89y\xdc\xbf\x1f\x1c\xfc\x88\xff\xb7\xdc\xbfH\xe9\rRA\xa2\xe3\xbf'
tbasg66
I00
sg67
I00
sg68
g1
(g69
g3
NtRp790
(dp791
g72
(I00
I00
tp792
sg74
S'float64'
p793
sg76
g65
sg77
I00
sg36
Nsbsg78
Nsbsg36
S'Ev_OL.W'
p794
sg37
Nsg68
g790
sbasg20
g1
(g21
g3
NtRp795
sg80
(lp796
g367
asg82
g687
sbsg68
g1
(g69
g3
NtRp797
(dp798
g72
(I00
I00
tp799
sg74
S'float64'
p800
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp801
(dp802
g17
S'auto_110'
p803
sg19
I0
sg20
g1
(g21
g3
NtRp804
(dp805
g24
(lp806
(lp807
(g27
I180
g28
S'generate_fake_data()'
tp808
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp809
a(g33
I84
g34
S'Bs = lasagne.layers.get_output(self.NNEvolve, inputs=self.X[:,:-1,:].reshape([self.Nsamps*(self.Tbins-1), self.xDim]))'
tp810
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp811
a(g361
I123
g362
S'activation = activation + self.b'
tp812
aasbsg36
Nsg37
g1
(g38
g3
NtRp813
(dp814
g41
(lp815
g1
(g43
g3
NtRp816
(dp817
g17
S'auto_37'
p818
sg19
Nsg20
g1
(g21
g3
NtRp819
(dp820
g24
(lp821
(lp822
(g27
I180
g28
S'generate_fake_data()'
tp823
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp824
a(g33
I82
g34
S"self.NNEvolve = lasagne.layers.DenseLayer(NNEvolve, xDim**2, nonlinearity=linear, W=lasagne.init.Uniform(0.9), name=nnname+'_OL')"
tp825
a(g667
I108
g34
S'regularizable=False)'
tp826
a(g669
I234
g670
S'param = utils.create_param(spec, shape, name)'
tp827
a(g672
I355
g673
S'spec = theano.shared(spec, broadcastable=bcast)'
tp828
aasbsg54
g1
(g55
g3
NtRp829
(dp830
g36
Nsg59
(lp831
g61
(g62
(I0
tS'b'
tRp832
(I1
(I4
tg65
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg66
I00
sg67
I00
sg68
g1
(g69
g3
NtRp833
(dp834
g72
(I00
tp835
sg74
S'float64'
p836
sg76
g65
sg77
I00
sg36
Nsbsg78
Nsbsg36
S'Ev_OL.b'
p837
sg37
Nsg68
g833
sbasg20
g1
(g21
g3
NtRp838
sg80
(lp839
g801
asg82
g1
(g731
g3
NtRp840
(dp841
g734
g835
sg735
(lp842
I0
asg737
(lp843
I0
asg739
(lp844
sg741
I01
sg742
(S'x'
I0
tp845
sg744
(dp846
I0
(lp847
I0
assbsbsg68
g1
(g69
g3
NtRp848
(dp849
g72
(I01
I00
tp850
sg74
g836
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp851
sg80
(lp852
g348
asg82
g752
sbsg68
g1
(g69
g3
NtRp853
(dp854
g72
(I00
I00
tp855
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp856
(dp857
g17
S'auto_135'
p858
sg19
I0
sg20
g1
(g21
g3
NtRp859
(dp860
g24
(lp861
(lp862
(g27
I180
g28
S'generate_fake_data()'
tp863
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp864
a(g33
I85
g34
S'Bs = Bs.reshape([Nsamps*(Tbins-1), xDim, xDim])'
tp865
aasbsg36
Nsg37
g1
(g38
g3
NtRp866
(dp867
g41
(lp868
g1
(g14
g3
NtRp869
(dp870
g17
S'auto_120'
p871
sg19
I0
sg20
g1
(g21
g3
NtRp872
(dp873
g24
(lp874
(lp875
(g27
I180
g28
S'generate_fake_data()'
tp876
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp877
a(g33
I85
g34
S'Bs = Bs.reshape([Nsamps*(Tbins-1), xDim, xDim])'
tp878
aasbsg36
Nsg37
g1
(g38
g3
NtRp879
(dp880
g41
(lp881
g222
ag1
(g14
g3
NtRp882
(dp883
g17
S'auto_116'
p884
sg19
I0
sg20
g1
(g21
g3
NtRp885
(dp886
g24
(lp887
(lp888
(g27
I180
g28
S'generate_fake_data()'
tp889
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp890
a(g33
I85
g34
S'Bs = Bs.reshape([Nsamps*(Tbins-1), xDim, xDim])'
tp891
aasbsg36
Nsg37
g1
(g38
g3
NtRp892
(dp893
g41
(lp894
g162
ag519
asg20
g1
(g21
g3
NtRp895
sg80
(lp896
g882
asg82
g539
sbsg68
g1
(g69
g3
NtRp897
(dp898
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp899
sg80
(lp900
g869
asg82
g569
sbsg68
g1
(g69
g3
NtRp901
(dp902
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp903
(dp904
g17
S'auto_131'
p905
sg19
I0
sg20
g1
(g21
g3
NtRp906
(dp907
g24
(lp908
(lp909
(g27
I180
g28
S'generate_fake_data()'
tp910
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp911
a(g33
I85
g34
S'Bs = Bs.reshape([Nsamps*(Tbins-1), xDim, xDim])'
tp912
aasbsg36
Nsg37
g1
(g38
g3
NtRp913
(dp914
g41
(lp915
g599
asg20
g1
(g21
g3
NtRp916
sg80
(lp917
g903
asg82
g615
sbsg68
g1
(g69
g3
NtRp918
(dp919
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp920
(dp921
g17
S'auto_134'
p922
sg19
I0
sg20
g1
(g21
g3
NtRp923
(dp924
g24
(lp925
(lp926
(g27
I180
g28
S'generate_fake_data()'
tp927
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp928
a(g33
I85
g34
S'Bs = Bs.reshape([Nsamps*(Tbins-1), xDim, xDim])'
tp929
aasbsg36
Nsg37
g1
(g38
g3
NtRp930
(dp931
g41
(lp932
g599
asg20
g1
(g21
g3
NtRp933
sg80
(lp934
g920
asg82
g615
sbsg68
g1
(g69
g3
NtRp935
(dp936
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp937
sg80
(lp938
g856
asg82
g1
(g641
g3
NtRp939
(dp940
g74
S'int64'
p941
sbsbsg68
g1
(g69
g3
NtRp942
(dp943
g72
(I00
tp944
sg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp945
sg80
(lp946
g335
asg82
g1
(g650
g3
NtRp947
(dp948
g653
I3
sbsbsg68
g1
(g69
g3
NtRp949
(dp950
g72
(I00
I00
I00
tp951
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g135
g3
NtRp952
(dp953
g17
S'auto_188'
p954
sg19
Nsg20
g1
(g21
g3
NtRp955
(dp956
g24
(lp957
(lp958
(g27
I180
g28
S'generate_fake_data()'
tp959
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp960
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp961
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp962
sbasg20
g1
(g21
g3
NtRp963
sg80
(lp964
g322
asg82
g1
(g154
g3
NtRp965
(dp966
g157
(g471
(g147
NNtRp967
tp968
sbsbsg68
g1
(g69
g3
NtRp969
(dp970
g72
(I00
I00
I00
tp971
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp972
sg80
(lp973
g309
asg82
g129
sbsg68
g130
sbag1
(g135
g3
NtRp974
(dp975
g17
S'auto_191'
p976
sg19
Nsg20
g1
(g21
g3
NtRp977
(dp978
g24
(lp979
(lp980
(g27
I180
g28
S'generate_fake_data()'
tp981
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp982
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp983
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp984
sbasg20
g1
(g21
g3
NtRp985
sg80
(lp986
g296
asg82
g1
(g154
g3
NtRp987
(dp988
g157
(g147
tp989
sbsbsg68
g1
(g69
g3
NtRp990
(dp991
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp992
(dp993
g17
S'auto_194'
p994
sg19
I0
sg20
g1
(g21
g3
NtRp995
(dp996
g24
(lp997
(lp998
(g27
I180
g28
S'generate_fake_data()'
tp999
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1000
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp1001
aasbsg36
Nsg37
g1
(g38
g3
NtRp1002
(dp1003
g41
(lp1004
g322
ag1
(ctheano.scalar.basic
ScalarVariable
p1005
g3
NtRp1006
(dp1007
g17
S'auto_193'
p1008
sg19
I0
sg20
g1
(g21
g3
NtRp1009
sg36
Nsg37
g1
(g38
g3
NtRp1010
(dp1011
g41
(lp1012
g296
asg20
g1
(g21
g3
NtRp1013
sg80
(lp1014
g1006
asg82
g1
(ctheano.tensor.basic
ScalarFromTensor
p1015
g3
NtRp1016
sbsg68
g147
sbasg20
g1
(g21
g3
NtRp1017
sg80
(lp1018
g992
asg82
g1
(g154
g3
NtRp1019
(dp1020
g157
(g471
(Ng147
NtRp1021
tp1022
sbsbsg68
g1
(g69
g3
NtRp1023
(dp1024
g72
(I00
I00
I00
tp1025
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbag296
ag1
(g43
g3
NtRp1026
(dp1027
g17
S'auto_32'
p1028
sg19
Nsg20
g1
(g21
g3
NtRp1029
(dp1030
g24
(lp1031
(lp1032
(g27
I180
g28
S'generate_fake_data()'
tp1033
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1034
a(g33
I71
g34
S"self.Alinear = theano.shared(value=np.eye(xDim), name='Alinear', borrow=True)"
tp1035
aasbsg54
g1
(g55
g3
NtRp1036
(dp1037
g36
S'Alinear'
p1038
sg59
(lp1039
g61
(g62
(I0
tS'b'
tRp1040
(I1
(I2
I2
tg65
I00
S'\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?'
tbasg66
I00
sg67
I00
sg68
g1
(g69
g3
NtRp1041
(dp1042
g72
(I00
I00
tp1043
sg74
S'float64'
p1044
sg76
g65
sg77
I00
sg36
Nsbsg78
Nsbsg36
g1038
sg37
Nsg68
g1041
sbasg20
g1
(g21
g3
NtRp1045
sg80
(lp1046
g283
asg82
g1
(ctheano.scan_module.scan_op
Scan
p1047
g3
NtRp1048
(dp1049
S'profile'
p1050
I00
sg41
(lp1051
g1
(g14
g3
NtRp1052
(dp1053
g17
S'auto_187'
p1054
sg19
Nsg20
g1
(g21
g3
NtRp1055
(dp1056
g24
(lp1057
(lp1058
(g27
I180
g28
S'generate_fake_data()'
tp1059
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1060
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp1061
aasbsg36
Nsg37
Nsg68
g1
(g69
g3
NtRp1062
(dp1063
g72
(I00
I00
tp1064
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp1065
(dp1066
g17
S'auto_226'
p1067
sg19
Nsg20
g1
(g21
g3
NtRp1068
(dp1069
g24
(lp1070
(lp1071
(g27
I180
g28
S'generate_fake_data()'
tp1072
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1073
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp1074
aasbsg36
S'Alinear_copy'
p1075
sg37
Nsg68
g1041
sbasS'var_mappings'
p1076
(dp1077
S'outer_inp_from_outer_out'
p1078
(dp1079
I0
I2
ssS'inner_out_from_outer_inp'
p1080
(dp1081
I0
(lp1082
sI1
(lp1083
sI2
(lp1084
I0
asI3
(lp1085
ssS'inner_out_from_inner_inp'
p1086
(dp1087
I0
g1083
sI1
g1085
ssS'outer_inp_from_inner_out'
p1088
(dp1089
I0
I2
ssS'inner_inp_from_inner_out'
p1090
(dp1091
I0
(lp1092
ssS'outer_inp_from_inner_inp'
p1093
(dp1094
I0
I1
sI1
I3
ssS'outer_out_from_inner_inp'
p1095
(dp1096
I0
I-1
sI1
I-1
ssS'outer_out_from_outer_inp'
p1097
(dp1098
I0
I-1
sI1
I-1
sI2
I0
sI3
I-1
ssS'outer_out_from_inner_out'
p1099
(dp1100
I0
I0
ssS'inner_out_from_outer_out'
p1101
(dp1102
I0
g1084
ssS'inner_inp_from_outer_out'
p1103
(dp1104
I0
g1092
ssS'inner_inp_from_outer_inp'
p1105
(dp1106
I0
(lp1107
sI1
(lp1108
I0
asI2
g1092
sI3
(lp1109
I1
asssS'tap_array'
p1110
(lp1111
sS'n_mit_mot'
p1112
I0
sS'_hash_inner_graph'
p1113
I-8917247173704902394
sg80
(lp1114
g1
(g14
g3
NtRp1115
(dp1116
g17
S'auto_233'
p1117
sg19
I0
sg20
g1
(g21
g3
NtRp1118
(dp1119
g24
(lp1120
(lp1121
(g27
I180
g28
S'generate_fake_data()'
tp1122
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1123
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp1124
a(S'/Users/danielhernandez/anaconda/lib/python2.7/site-packages/theano/scan_module/scan.py'
p1125
I773
S'scan'
p1126
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp1127
a(S'/Users/danielhernandez/Work/time_series/vae_nlds_rec_algo_v2/LatEvModels.py'
p1128
I89
S'<lambda>'
p1129
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp1130
aasbsg36
Nsg37
g1
(g38
g3
NtRp1131
(dp1132
g41
(lp1133
g1065
ag1
(g14
g3
NtRp1134
(dp1135
g17
S'auto_232'
p1136
sg19
I0
sg20
g1
(g21
g3
NtRp1137
(dp1138
g24
(lp1139
(lp1140
(g27
I180
g28
S'generate_fake_data()'
tp1141
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1142
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp1143
a(g1125
I773
g1126
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp1144
a(g1128
I89
g1129
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp1145
aasbsg36
Nsg37
g1
(g38
g3
NtRp1146
(dp1147
g41
(lp1148
g1
(g14
g3
NtRp1149
(dp1150
g17
S'auto_231'
p1151
sg19
I0
sg20
g1
(g21
g3
NtRp1152
(dp1153
g24
(lp1154
(lp1155
(g27
I180
g28
S'generate_fake_data()'
tp1156
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1157
a(g33
I89
g34
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp1158
a(g1125
I773
g1126
S'condition, outputs, updates = scan_utils.get_updates_and_outputs(fn(*args))'
tp1159
a(g1128
I89
g1129
S'As, _ = theano.scan(fn=lambda Bt : self.Alinear + alpha*Bt, sequences=Bs)'
tp1160
aasbsg36
Nsg37
g1
(g38
g3
NtRp1161
(dp1162
g41
(lp1163
g1
(g518
g3
NtRp1164
(dp1165
g17
S'auto_172'
p1166
sg19
Nsg20
g1
(g21
g3
NtRp1167
(dp1168
g24
(lp1169
(lp1170
(g27
I180
g28
S'generate_fake_data()'
tp1171
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1172
a(g33
I88
g34
S'self.A = self.Alinear + alpha*self.B'
tp1173
aasg529
Nsbsg36
Nsg530
I01
sg68
g1
(g69
g3
NtRp1174
(dp1175
g72
(tsg74
S'float64'
p1176
sg76
g65
sg77
I00
sg36
Nsbsg149
g61
(g62
(I0
tS'b'
tRp1177
(I1
(tg65
I00
S'333333\xd3?'
tbsbasg20
g1
(g21
g3
NtRp1178
sg80
(lp1179
g1149
asg82
g1
(g731
g3
NtRp1180
(dp1181
g734
(tsg735
(lp1182
sg737
(lp1183
I0
aI1
asg739
(lp1184
sg741
I01
sg742
(S'x'
S'x'
tp1185
sg744
(dp1186
I0
(lp1187
I0
assbsbsg68
g1
(g69
g3
NtRp1188
(dp1189
g72
(I01
I01
tp1190
sg74
g1176
sg76
g65
sg77
I00
sg36
Nsbsbag1052
asg20
g1
(g21
g3
NtRp1191
sg80
(lp1192
g1134
asg82
g569
sbsg68
g1
(g69
g3
NtRp1193
(dp1194
g72
(I00
I00
tp1195
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1196
sg80
(lp1197
g1115
asg82
g752
sbsg68
g1
(g69
g3
NtRp1198
(dp1199
g72
(I00
I00
tp1200
sg74
g125
sg76
g65
sg77
I00
sg36
NsbsbasS'seqs_arg_offset'
p1201
I2
sS'gpua'
p1202
I00
sg551
ccollections
OrderedDict
p1203
((ltRp1204
sS'n_nit_sot'
p1205
I1
sS'n_outs'
p1206
I0
sS'mintaps'
p1207
(lp1208
I0
asS'n_sit_sot'
p1209
I0
sS'nit_sot_arg_offset'
p1210
I2
sS'as_while'
p1211
I00
sS'truncate_gradient'
p1212
I-1
sS'n_seqs'
p1213
I1
sg36
S'scan_fn'
p1214
sS'mode_instance'
p1215
g1
(ctheano.compile.mode
Mode
p1216
g3
NtRp1217
(g1
(ctheano.gof.vm
VM_Linker
p1218
g3
NtRp1219
(dp1220
S'use_cloop'
p1221
I01
sS'lazy'
p1222
NsS'allow_partial_eval'
p1223
NsS'fgraph'
p1224
NsS'c_thunks'
p1225
I01
sS'callback_input'
p1226
NsS'callback'
p1227
NsS'allow_gc'
p1228
I00
sS'mode'
p1229
g1217
sS'updated_vars'
p1230
(dp1231
sbg1
(ctheano.gof.optdb
Query
p1232
g3
NtRp1233
(dp1234
g36
S'OPT_FAST_RUN'
p1235
sS'require'
p1236
g1
(ctheano.misc.ordered_set
OrderedSet
p1237
g3
NtRp1238
(dp1239
S'_OrderedSet__root'
p1240
g1
(ctheano.misc.ordered_set
Link
p1241
g3
NtRp1242
(lp1243
g1242
ag1242
absS'_OrderedSet__map'
p1244
(dp1245
sbsS'subquery'
p1246
(dp1247
sS'position_cutoff'
p1248
Finf
sS'exclude'
p1249
g1
(g1237
g3
NtRp1250
(dp1251
g1240
g1
(g1241
g3
NtRp1252
(lp1253
g1252
ag1252
absg1244
(dp1254
sbsS'include'
p1255
g1
(g1237
g3
NtRp1256
(dp1257
g1240
g1
(g1241
g3
NtRp1258
(lp1259
g1
(g1241
g3
NtRp1260
(lp1261
g1258
ag1258
aS'fast_run'
p1262
abag1260
absg1244
(dp1263
g1262
g1260
ssbsS'extra_optimizations'
p1264
(lp1265
sbtbsS'info'
p1266
g1203
((lp1267
(lp1268
g1110
ag1111
aa(lp1269
g1213
aI1
aa(lp1270
g1112
aI0
aa(lp1271
S'n_mit_mot_outs'
p1272
aI0
aa(lp1273
S'mit_mot_out_slices'
p1274
a(lp1275
aa(lp1276
S'n_mit_sot'
p1277
aI0
aa(lp1278
g1209
aI0
aa(lp1279
S'n_shared_outs'
p1280
aI0
aa(lp1281
g1205
aI1
aa(lp1282
g1212
aI-1
aa(lp1283
g36
ag1214
aa(lp1284
g1229
aNaa(lp1285
g551
ag1204
aa(lp1286
S'gpu'
p1287
aI00
aa(lp1288
g1211
aI00
aa(lp1289
g1050
aI00
aa(lp1290
g1228
aI00
aa(lp1291
g66
aI00
aa(lp1292
g1202
aI00
aatRp1293
sS'_cmodule_key'
p1294
(((I3
tp1295
(I11
I13
S'1.12.1'
p1296
t(I11
I13
g1296
t(I12
(I4
tp1297
(I13
g1296
t(I13
g1296
t(I13
g1296
t(g562
I00
tt(I11
I13
g1296
t(I11
I13
g1296
t(I11
I13
g1296
t(I12
g1297
(I13
g1296
t(I13
g1296
t(I13
g1296
t(g562
I00
tt(I11
I13
g1296
t(I11
I13
g1296
t(I11
I13
g1296
tt(S'CLinker.cmodule_key'
p1298
(t(t(tS'NPY_ABI_VERSION=0x1000009'
S'md5:5951dbcd215530e16c8c014e8a22e751'
(g1180
((g1174
((S'f87a2a86fce30c186a6052a0ddb14059'
I0
I0
tI00
ttt(I1
(I00
ttt(g569
((g1188
((I0
I0
tI00
tt(g1062
((I-1
I0
tp1299
I00
ttt(I1
(I00
ttt(g752
((g1041
((I-1
I1
tp1300
I00
tt(g1193
((I1
I0
tI00
ttt(I1
(I00
ttt(g1062
(g1299
I00
tt(g1041
(g1300
I00
ttttp1301
sg1277
I0
sS'vector_outs'
p1302
(lp1303
I00
asS'vector_seqs'
p1304
(lp1305
I00
asS'n_tap_outs'
p1306
I0
sg66
I00
sg1280
I0
sg1228
I00
sg1229
NsS'output_types'
p1307
(lp1308
g1
(g69
g3
NtRp1309
(dp1310
g72
(I00
I00
I00
tp1311
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbasg1287
I00
sg1272
I0
sS'shared_arg_offset'
p1312
I2
sg1274
g1275
sbsbsg68
g1309
sbag1
(g14
g3
NtRp1313
(dp1314
g17
S'auto_272'
p1315
sg19
I0
sg20
g1
(g21
g3
NtRp1316
(dp1317
g24
(lp1318
(lp1319
(g27
I180
g28
S'generate_fake_data()'
tp1320
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1321
a(g33
I90
g34
S'self.totalA = T.reshape(As, [Nsamps, Tbins-1, xDim, xDim])'
tp1322
aasbsg36
Nsg37
g1
(g38
g3
NtRp1323
(dp1324
g41
(lp1325
g222
ag1
(g14
g3
NtRp1326
(dp1327
g17
S'auto_257'
p1328
sg19
I0
sg20
g1
(g21
g3
NtRp1329
(dp1330
g24
(lp1331
(lp1332
(g27
I180
g28
S'generate_fake_data()'
tp1333
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1334
a(g33
I90
g34
S'self.totalA = T.reshape(As, [Nsamps, Tbins-1, xDim, xDim])'
tp1335
aasbsg36
Nsg37
g1
(g38
g3
NtRp1336
(dp1337
g41
(lp1338
g162
ag519
asg20
g1
(g21
g3
NtRp1339
sg80
(lp1340
g1326
asg82
g539
sbsg68
g1
(g69
g3
NtRp1341
(dp1342
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp1343
(dp1344
g17
S'auto_268'
p1345
sg19
I0
sg20
g1
(g21
g3
NtRp1346
(dp1347
g24
(lp1348
(lp1349
(g27
I180
g28
S'generate_fake_data()'
tp1350
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1351
a(g33
I90
g34
S'self.totalA = T.reshape(As, [Nsamps, Tbins-1, xDim, xDim])'
tp1352
aasbsg36
Nsg37
g1
(g38
g3
NtRp1353
(dp1354
g41
(lp1355
g599
asg20
g1
(g21
g3
NtRp1356
sg80
(lp1357
g1343
asg82
g615
sbsg68
g1
(g69
g3
NtRp1358
(dp1359
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp1360
(dp1361
g17
S'auto_271'
p1362
sg19
I0
sg20
g1
(g21
g3
NtRp1363
(dp1364
g24
(lp1365
(lp1366
(g27
I180
g28
S'generate_fake_data()'
tp1367
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1368
a(g33
I90
g34
S'self.totalA = T.reshape(As, [Nsamps, Tbins-1, xDim, xDim])'
tp1369
aasbsg36
Nsg37
g1
(g38
g3
NtRp1370
(dp1371
g41
(lp1372
g599
asg20
g1
(g21
g3
NtRp1373
sg80
(lp1374
g1360
asg82
g615
sbsg68
g1
(g69
g3
NtRp1375
(dp1376
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1377
sg80
(lp1378
g1313
asg82
g1
(g641
g3
NtRp1379
(dp1380
g74
S'int64'
p1381
sbsbsg68
g1
(g69
g3
NtRp1382
(dp1383
g72
(I00
tp1384
sg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1385
sg80
(lp1386
g270
asg82
g1
(g650
g3
NtRp1387
(dp1388
g653
I4
sbsbsg68
g1
(g69
g3
NtRp1389
(dp1390
g72
(I00
I00
I00
I00
tp1391
sg74
g125
sg76
g65
sg77
I00
sg36
NsbsbsS'totalB'
p1392
g1
(g14
g3
NtRp1393
(dp1394
g17
S'auto_171'
p1395
sg19
I0
sg20
g1
(g21
g3
NtRp1396
(dp1397
g24
(lp1398
(lp1399
(g27
I180
g28
S'generate_fake_data()'
tp1400
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1401
a(g33
I86
g34
S'self.totalB = T.reshape(Bs, [Nsamps, Tbins-1, xDim, xDim])'
tp1402
aasbsg36
Nsg37
g1
(g38
g3
NtRp1403
(dp1404
g41
(lp1405
g335
ag1
(g14
g3
NtRp1406
(dp1407
g17
S'auto_162'
p1408
sg19
I0
sg20
g1
(g21
g3
NtRp1409
(dp1410
g24
(lp1411
(lp1412
(g27
I180
g28
S'generate_fake_data()'
tp1413
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1414
a(g33
I86
g34
S'self.totalB = T.reshape(Bs, [Nsamps, Tbins-1, xDim, xDim])'
tp1415
aasbsg36
Nsg37
g1
(g38
g3
NtRp1416
(dp1417
g41
(lp1418
g222
ag1
(g14
g3
NtRp1419
(dp1420
g17
S'auto_147'
p1421
sg19
I0
sg20
g1
(g21
g3
NtRp1422
(dp1423
g24
(lp1424
(lp1425
(g27
I180
g28
S'generate_fake_data()'
tp1426
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1427
a(g33
I86
g34
S'self.totalB = T.reshape(Bs, [Nsamps, Tbins-1, xDim, xDim])'
tp1428
aasbsg36
Nsg37
g1
(g38
g3
NtRp1429
(dp1430
g41
(lp1431
g162
ag519
asg20
g1
(g21
g3
NtRp1432
sg80
(lp1433
g1419
asg82
g539
sbsg68
g1
(g69
g3
NtRp1434
(dp1435
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp1436
(dp1437
g17
S'auto_158'
p1438
sg19
I0
sg20
g1
(g21
g3
NtRp1439
(dp1440
g24
(lp1441
(lp1442
(g27
I180
g28
S'generate_fake_data()'
tp1443
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1444
a(g33
I86
g34
S'self.totalB = T.reshape(Bs, [Nsamps, Tbins-1, xDim, xDim])'
tp1445
aasbsg36
Nsg37
g1
(g38
g3
NtRp1446
(dp1447
g41
(lp1448
g599
asg20
g1
(g21
g3
NtRp1449
sg80
(lp1450
g1436
asg82
g615
sbsg68
g1
(g69
g3
NtRp1451
(dp1452
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp1453
(dp1454
g17
S'auto_161'
p1455
sg19
I0
sg20
g1
(g21
g3
NtRp1456
(dp1457
g24
(lp1458
(lp1459
(g27
I180
g28
S'generate_fake_data()'
tp1460
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1461
a(g33
I86
g34
S'self.totalB = T.reshape(Bs, [Nsamps, Tbins-1, xDim, xDim])'
tp1462
aasbsg36
Nsg37
g1
(g38
g3
NtRp1463
(dp1464
g41
(lp1465
g599
asg20
g1
(g21
g3
NtRp1466
sg80
(lp1467
g1453
asg82
g615
sbsg68
g1
(g69
g3
NtRp1468
(dp1469
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1470
sg80
(lp1471
g1406
asg82
g1
(g641
g3
NtRp1472
(dp1473
g74
S'int64'
p1474
sbsbsg68
g1
(g69
g3
NtRp1475
(dp1476
g72
(I00
tp1477
sg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1478
sg80
(lp1479
g1393
asg82
g1
(g650
g3
NtRp1480
(dp1481
g653
I4
sbsbsg68
g1
(g69
g3
NtRp1482
(dp1483
g72
(I00
I00
I00
I00
tp1484
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbsg1038
g1026
sS'optimize_alpha'
p1485
I00
sS'Q0Inv'
p1486
g1
(g14
g3
NtRp1487
(dp1488
g17
S'auto_30'
p1489
sg19
I0
sg20
g1
(g21
g3
NtRp1490
(dp1491
g24
(lp1492
(lp1493
(g27
I180
g28
S'generate_fake_data()'
tp1494
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1495
a(g33
I65
g34
S'self.Q0Inv = T.dot(self.Q0InvChol, self.Q0InvChol.T)'
tp1496
aasbsg36
Nsg37
g1
(g38
g3
NtRp1497
(dp1498
g41
(lp1499
g44
ag1
(g14
g3
NtRp1500
(dp1501
g17
S'auto_29'
p1502
sg19
I0
sg20
g1
(g21
g3
NtRp1503
(dp1504
g24
(lp1505
(lp1506
(g27
I180
g28
S'generate_fake_data()'
tp1507
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1508
a(g33
I65
g34
S'self.Q0Inv = T.dot(self.Q0InvChol, self.Q0InvChol.T)'
tp1509
aasbsg36
S'Q0InvChol.T'
p1510
sg37
g1
(g38
g3
NtRp1511
(dp1512
g41
(lp1513
g44
asg20
g1
(g21
g3
NtRp1514
sg80
(lp1515
g1500
asg82
g1
(g731
g3
NtRp1516
(dp1517
g734
g73
sg735
(lp1518
I1
aI0
asg737
(lp1519
sg739
(lp1520
sg741
I01
sg742
(I1
I0
tp1521
sg744
(dp1522
I0
(lp1523
I0
assbsbsg68
g1
(g69
g3
NtRp1524
(dp1525
g72
(I00
I00
tp1526
sg74
g75
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1527
sg80
(lp1528
g1487
asg82
g687
sbsg68
g1
(g69
g3
NtRp1529
(dp1530
g72
(I00
I00
tp1531
sg74
S'float64'
p1532
sg76
g65
sg77
I00
sg36
Nsbsbsg58
g44
sS'A'
g1
(g14
g3
NtRp1533
(dp1534
g17
S'auto_182'
p1535
sg19
I0
sg20
g1
(g21
g3
NtRp1536
(dp1537
g24
(lp1538
(lp1539
(g27
I180
g28
S'generate_fake_data()'
tp1540
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1541
a(g33
I88
g34
S'self.A = self.Alinear + alpha*self.B'
tp1542
aasbsg36
Nsg37
g1
(g38
g3
NtRp1543
(dp1544
g41
(lp1545
g1
(g14
g3
NtRp1546
(dp1547
g17
S'auto_181'
p1548
sg19
I0
sg20
g1
(g21
g3
NtRp1549
(dp1550
g24
(lp1551
(lp1552
(g27
I180
g28
S'generate_fake_data()'
tp1553
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1554
a(g33
I88
g34
S'self.A = self.Alinear + alpha*self.B'
tp1555
aasbsg36
Nsg37
g1
(g38
g3
NtRp1556
(dp1557
g41
(lp1558
g1026
asg20
g1
(g21
g3
NtRp1559
sg80
(lp1560
g1546
asg82
g1
(g731
g3
NtRp1561
(dp1562
g734
g1043
sg735
(lp1563
I0
aI1
asg737
(lp1564
I0
asg739
(lp1565
sg741
I01
sg742
(S'x'
I0
I1
tp1566
sg744
(dp1567
I0
(lp1568
I0
assbsbsg68
g1
(g69
g3
NtRp1569
(dp1570
g72
(I01
I00
I00
tp1571
sg74
g1044
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp1572
(dp1573
g17
S'auto_177'
p1574
sg19
I0
sg20
g1
(g21
g3
NtRp1575
(dp1576
g24
(lp1577
(lp1578
(g27
I180
g28
S'generate_fake_data()'
tp1579
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1580
a(g33
I88
g34
S'self.A = self.Alinear + alpha*self.B'
tp1581
aasbsg36
Nsg37
g1
(g38
g3
NtRp1582
(dp1583
g41
(lp1584
g1
(g14
g3
NtRp1585
(dp1586
g17
S'auto_176'
p1587
sg19
I0
sg20
g1
(g21
g3
NtRp1588
(dp1589
g24
(lp1590
(lp1591
(g27
I180
g28
S'generate_fake_data()'
tp1592
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1593
a(g33
I88
g34
S'self.A = self.Alinear + alpha*self.B'
tp1594
aasbsg36
Nsg37
g1
(g38
g3
NtRp1595
(dp1596
g41
(lp1597
g1164
asg20
g1
(g21
g3
NtRp1598
sg80
(lp1599
g1585
asg82
g1
(g731
g3
NtRp1600
(dp1601
g734
(tsg735
(lp1602
sg737
(lp1603
I0
aI1
aI2
asg739
(lp1604
sg741
I01
sg742
(S'x'
S'x'
S'x'
tp1605
sg744
(dp1606
I0
(lp1607
I0
assbsbsg68
g1
(g69
g3
NtRp1608
(dp1609
g72
(I01
I01
I01
tp1610
sg74
g1176
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp1611
(dp1612
g17
S'auto_74'
p1613
sg19
I0
sg20
g1
(g21
g3
NtRp1614
(dp1615
g24
(lp1616
(lp1617
(g27
I180
g28
S'generate_fake_data()'
tp1618
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1619
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp1620
aasbsg36
Nsg37
g1
(g38
g3
NtRp1621
(dp1622
g41
(lp1623
g1
(g14
g3
NtRp1624
(dp1625
g17
S'auto_50'
p1626
sg19
I0
sg20
g1
(g21
g3
NtRp1627
(dp1628
g24
(lp1629
(lp1630
(g27
I180
g28
S'generate_fake_data()'
tp1631
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1632
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp1633
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1634
a(g361
I123
g362
S'activation = activation + self.b'
tp1635
aasbsg36
Nsg37
g1
(g38
g3
NtRp1636
(dp1637
g41
(lp1638
g1
(g14
g3
NtRp1639
(dp1640
g17
S'auto_45'
p1641
sg19
I0
sg20
g1
(g21
g3
NtRp1642
(dp1643
g24
(lp1644
(lp1645
(g27
I180
g28
S'generate_fake_data()'
tp1646
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1647
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp1648
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1649
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp1650
aasbsg36
Nsg37
g1
(g38
g3
NtRp1651
(dp1652
g41
(lp1653
g1
(g14
g3
NtRp1654
(dp1655
g17
S'auto_44'
p1656
sg19
I0
sg20
g1
(g21
g3
NtRp1657
(dp1658
g24
(lp1659
(lp1660
(g27
I180
g28
S'generate_fake_data()'
tp1661
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1662
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp1663
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1664
a(g361
I124
g362
S'return self.nonlinearity(activation)'
tp1665
a(g394
I44
g395
S'return theano.tensor.nnet.softmax(x)'
tp1666
aasbsg36
Nsg37
g1
(g38
g3
NtRp1667
(dp1668
g41
(lp1669
g1
(g14
g3
NtRp1670
(dp1671
g17
S'auto_43'
p1672
sg19
I0
sg20
g1
(g21
g3
NtRp1673
(dp1674
g24
(lp1675
(lp1676
(g27
I180
g28
S'generate_fake_data()'
tp1677
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1678
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp1679
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1680
a(g361
I123
g362
S'activation = activation + self.b'
tp1681
aasbsg36
Nsg37
g1
(g38
g3
NtRp1682
(dp1683
g41
(lp1684
g1
(g14
g3
NtRp1685
(dp1686
g17
S'auto_38'
p1687
sg19
I0
sg20
g1
(g21
g3
NtRp1688
(dp1689
g24
(lp1690
(lp1691
(g27
I180
g28
S'generate_fake_data()'
tp1692
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1693
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp1694
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1695
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp1696
aasbsg36
Nsg37
g1
(g38
g3
NtRp1697
(dp1698
g41
(lp1699
g112
ag657
asg20
g1
(g21
g3
NtRp1700
sg80
(lp1701
g1685
asg82
g687
sbsg68
g1
(g69
g3
NtRp1702
(dp1703
g72
(I00
I00
tp1704
sg74
S'float64'
p1705
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp1706
(dp1707
g17
S'auto_42'
p1708
sg19
I0
sg20
g1
(g21
g3
NtRp1709
(dp1710
g24
(lp1711
(lp1712
(g27
I180
g28
S'generate_fake_data()'
tp1713
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1714
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp1715
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1716
a(g361
I123
g362
S'activation = activation + self.b'
tp1717
aasbsg36
Nsg37
g1
(g38
g3
NtRp1718
(dp1719
g41
(lp1720
g707
asg20
g1
(g21
g3
NtRp1721
sg80
(lp1722
g1706
asg82
g1
(g731
g3
NtRp1723
(dp1724
g734
g726
sg735
(lp1725
I0
asg737
(lp1726
I0
asg739
(lp1727
sg741
I01
sg742
(S'x'
I0
tp1728
sg744
(dp1729
I0
(lp1730
I0
assbsbsg68
g1
(g69
g3
NtRp1731
(dp1732
g72
(I01
I00
tp1733
sg74
g727
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1734
sg80
(lp1735
g1670
asg82
g752
sbsg68
g1
(g69
g3
NtRp1736
(dp1737
g72
(I00
I00
tp1738
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1739
sg80
(lp1740
g1654
asg82
g772
sbsg68
g1736
sbag773
asg20
g1
(g21
g3
NtRp1741
sg80
(lp1742
g1639
asg82
g687
sbsg68
g1
(g69
g3
NtRp1743
(dp1744
g72
(I00
I00
tp1745
sg74
S'float64'
p1746
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp1747
(dp1748
g17
S'auto_49'
p1749
sg19
I0
sg20
g1
(g21
g3
NtRp1750
(dp1751
g24
(lp1752
(lp1753
(g27
I180
g28
S'generate_fake_data()'
tp1754
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1755
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp1756
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp1757
a(g361
I123
g362
S'activation = activation + self.b'
tp1758
aasbsg36
Nsg37
g1
(g38
g3
NtRp1759
(dp1760
g41
(lp1761
g816
asg20
g1
(g21
g3
NtRp1762
sg80
(lp1763
g1747
asg82
g1
(g731
g3
NtRp1764
(dp1765
g734
g835
sg735
(lp1766
I0
asg737
(lp1767
I0
asg739
(lp1768
sg741
I01
sg742
(S'x'
I0
tp1769
sg744
(dp1770
I0
(lp1771
I0
assbsbsg68
g1
(g69
g3
NtRp1772
(dp1773
g72
(I01
I00
tp1774
sg74
g836
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1775
sg80
(lp1776
g1624
asg82
g752
sbsg68
g1
(g69
g3
NtRp1777
(dp1778
g72
(I00
I00
tp1779
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp1780
(dp1781
g17
S'auto_65'
p1782
sg19
I0
sg20
g1
(g21
g3
NtRp1783
(dp1784
g24
(lp1785
(lp1786
(g27
I180
g28
S'generate_fake_data()'
tp1787
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1788
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp1789
aasbsg36
Nsg37
g1
(g38
g3
NtRp1790
(dp1791
g41
(lp1792
g86
ag1
(g14
g3
NtRp1793
(dp1794
g17
S'auto_61'
p1795
sg19
I0
sg20
g1
(g21
g3
NtRp1796
(dp1797
g24
(lp1798
(lp1799
(g27
I180
g28
S'generate_fake_data()'
tp1800
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1801
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp1802
aasbsg36
Nsg37
g1
(g38
g3
NtRp1803
(dp1804
g41
(lp1805
g599
asg20
g1
(g21
g3
NtRp1806
(dp1807
S'fake_node'
p1808
g1
(g38
g3
NtRp1809
(dp1810
g41
(lp1811
g1
(g1005
g3
NtRp1812
(dp1813
g17
S'auto_70'
p1814
sg19
Nsg20
g1
(g21
g3
NtRp1815
sg36
Nsg37
Nsg68
g1
(g146
g3
NtRp1816
(dp1817
g74
S'int8'
p1818
sbsbasg20
g1
(g21
g3
NtRp1819
sg80
(lp1820
g1
(g1005
g3
NtRp1821
(dp1822
g17
S'auto_71'
p1823
sg19
I0
sg20
g1
(g21
g3
NtRp1824
sg36
Nsg37
g1809
sg68
g147
sbasg82
g619
sbsbsg80
(lp1825
g1793
asg82
g615
sbsg68
g1
(g69
g3
NtRp1826
(dp1827
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp1828
(dp1829
g17
S'auto_64'
p1830
sg19
I0
sg20
g1
(g21
g3
NtRp1831
(dp1832
g24
(lp1833
(lp1834
(g27
I180
g28
S'generate_fake_data()'
tp1835
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1836
a(g33
I83
g34
S'self.B = lasagne.layers.get_output(self.NNEvolve, inputs=self.x).reshape([nsamps, xDim, xDim])'
tp1837
aasbsg36
Nsg37
g1
(g38
g3
NtRp1838
(dp1839
g41
(lp1840
g599
asg20
g1
(g21
g3
NtRp1841
sg80
(lp1842
g1828
asg82
g615
sbsg68
g1
(g69
g3
NtRp1843
(dp1844
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1845
sg80
(lp1846
g1780
asg82
g1
(g641
g3
NtRp1847
(dp1848
g74
S'int64'
p1849
sbsbsg68
g1
(g69
g3
NtRp1850
(dp1851
g72
(I00
tp1852
sg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1853
sg80
(lp1854
g1611
asg82
g1
(g650
g3
NtRp1855
(dp1856
g653
I3
sbsbsg68
g1
(g69
g3
NtRp1857
(dp1858
g72
(I00
I00
I00
tp1859
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1860
sg80
(lp1861
g1572
asg82
g569
sbsg68
g1
(g69
g3
NtRp1862
(dp1863
g72
(I00
I00
I00
tp1864
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1865
sg80
(lp1866
g1533
asg82
g752
sbsg68
g1
(g69
g3
NtRp1867
(dp1868
g72
(I00
I00
I00
tp1869
sg74
g125
sg76
g65
sg77
I00
sg36
NsbsbsS'B'
g1611
sS'Q'
g1
(g14
g3
NtRp1870
(dp1871
g17
S'auto_26'
p1872
sg19
I0
sg20
g1
(g21
g3
NtRp1873
(dp1874
g24
(lp1875
(lp1876
(g27
I180
g28
S'generate_fake_data()'
tp1877
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1878
a(g33
I60
g34
S'self.Q = Tnla.matrix_inverse(self.QInv)'
tp1879
aasbsg36
Nsg37
g1
(g38
g3
NtRp1880
(dp1881
g41
(lp1882
g1
(g14
g3
NtRp1883
(dp1884
g17
S'auto_25'
p1885
sg19
I0
sg20
g1
(g21
g3
NtRp1886
(dp1887
g24
(lp1888
(lp1889
(g27
I180
g28
S'generate_fake_data()'
tp1890
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1891
a(g33
I59
g34
S'self.QInv = T.dot(self.QInvChol, self.QInvChol.T)'
tp1892
aasbsg36
Nsg37
g1
(g38
g3
NtRp1893
(dp1894
g41
(lp1895
g1
(g43
g3
NtRp1896
(dp1897
g17
S'auto_22'
p1898
sg19
Nsg20
g1
(g21
g3
NtRp1899
(dp1900
g24
(lp1901
(lp1902
(g27
I180
g28
S'generate_fake_data()'
tp1903
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1904
a(g33
I57
g34
S"self.QInvChol = theano.shared(4.0*np.eye(xDim), 'QInvChol')"
tp1905
aasbsg54
g1
(g55
g3
NtRp1906
(dp1907
g36
S'QInvChol'
p1908
sg59
(lp1909
g61
(g62
(I0
tS'b'
tRp1910
(I1
(I2
I2
tg65
I00
S'\x00\x00\x00\x00\x00\x00\x10@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x10@'
tbasg66
I00
sg67
I00
sg68
g1
(g69
g3
NtRp1911
(dp1912
g72
(I00
I00
tp1913
sg74
S'float64'
p1914
sg76
g65
sg77
I00
sg36
Nsbsg78
Nsbsg36
g1908
sg37
Nsg68
g1911
sbag1
(g14
g3
NtRp1915
(dp1916
g17
S'auto_24'
p1917
sg19
I0
sg20
g1
(g21
g3
NtRp1918
(dp1919
g24
(lp1920
(lp1921
(g27
I180
g28
S'generate_fake_data()'
tp1922
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp1923
a(g33
I59
g34
S'self.QInv = T.dot(self.QInvChol, self.QInvChol.T)'
tp1924
aasbsg36
S'QInvChol.T'
p1925
sg37
g1
(g38
g3
NtRp1926
(dp1927
g41
(lp1928
g1896
asg20
g1
(g21
g3
NtRp1929
sg80
(lp1930
g1915
asg82
g1
(g731
g3
NtRp1931
(dp1932
g734
g1913
sg735
(lp1933
I1
aI0
asg737
(lp1934
sg739
(lp1935
sg741
I01
sg742
(I1
I0
tp1936
sg744
(dp1937
I0
(lp1938
I0
assbsbsg68
g1
(g69
g3
NtRp1939
(dp1940
g72
(I00
I00
tp1941
sg74
g1914
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1942
sg80
(lp1943
g1883
asg82
g687
sbsg68
g1
(g69
g3
NtRp1944
(dp1945
g72
(I00
I00
tp1946
sg74
S'float64'
p1947
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp1948
sg80
(lp1949
g1870
asg82
g84
sbsg68
g1944
sbsS'NNEvolve'
p1950
g1
(clasagne.layers.dense
DenseLayer
p1951
g3
NtRp1952
(dp1953
S'b'
g816
sg36
S'Ev_OL'
p1954
sS'nonlinearity'
p1955
clasagne.nonlinearities
linear
p1956
sS'num_units'
p1957
I4
sS'input_shape'
p1958
(NI60
tp1959
sS'params'
p1960
g1203
((lp1961
(lp1962
g773
ac__builtin__
set
p1963
((lp1964
S'trainable'
p1965
aS'regularizable'
p1966
atRp1967
aa(lp1968
g816
ag1963
((lp1969
g1965
atRp1970
aatRp1971
sS'input_layer'
p1972
g1
(g1951
g3
NtRp1973
(dp1974
S'b'
g707
sg36
S'Ev_HL1'
p1975
sg1955
clasagne.nonlinearities
softmax
p1976
sg1957
I60
sg1958
(NI2
tp1977
sg1960
g1203
((lp1978
(lp1979
g657
ag1963
((lp1980
g1965
ag1966
atRp1981
aa(lp1982
g707
ag1963
((lp1983
g1965
atRp1984
aatRp1985
sg1972
g1
(clasagne.layers.input
InputLayer
p1986
g3
NtRp1987
(dp1988
S'shape'
p1989
g1977
sg1960
g1203
((ltRp1990
sg36
S'Ev_IL'
p1991
sS'input_var'
p1992
g1
(g14
g3
NtRp1993
(dp1994
g17
S'auto_33'
p1995
sg19
Nsg20
g1
(g21
g3
NtRp1996
(dp1997
g24
(lp1998
(lp1999
(g27
I180
g28
S'generate_fake_data()'
tp2000
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp2001
a(g33
I80
g34
S"NNEvolve = lasagne.layers.InputLayer((None, self.xDim), name=nnname+'_IL')"
tp2002
a(S'/Users/danielhernandez/anaconda/lib/python2.7/site-packages/lasagne/layers/input.py'
p2003
I63
g34
S'input_var = input_var_type(var_name)'
tp2004
aasbsg36
S'Ev_IL.input'
p2005
sg37
Nsg68
g1
(g69
g3
NtRp2006
(dp2007
g72
(I00
I00
tp2008
sg74
g125
sg76
g65
sg77
I00
sg36
NsbsbsbsS'W'
g657
sS'num_leading_axes'
p2009
I1
sS'get_output_kwargs'
p2010
(lp2011
sbsS'W'
g773
sg2009
I1
sg2010
(lp2012
sbsg1908
g1896
sS'X'
g188
sS'x0'
p2013
g1
(g43
g3
NtRp2014
(dp2015
g17
S'auto_31'
p2016
sg19
Nsg20
g1
(g21
g3
NtRp2017
(dp2018
g24
(lp2019
(lp2020
(g27
I180
g28
S'generate_fake_data()'
tp2021
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp2022
a(g33
I67
g34
S"self.x0 = theano.shared(np.zeros(xDim), 'x0')"
tp2023
aasbsg54
g1
(g55
g3
NtRp2024
(dp2025
g36
g2013
sg59
(lp2026
g61
(g62
(I0
tS'b'
tRp2027
(I1
(I2
tg65
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg66
I00
sg67
I00
sg68
g1
(g69
g3
NtRp2028
(dp2029
g72
(I00
tp2030
sg74
S'float64'
p2031
sg76
g65
sg77
I00
sg36
Nsbsg78
Nsbsg36
g2013
sg37
Nsg68
g2028
sbsg7
I2
sS'QInv'
p2032
g1883
sS'x'
g112
sS'QChol'
p2033
g1
(g14
g3
NtRp2034
(dp2035
g17
S'auto_23'
p2036
sg19
I0
sg20
g1
(g21
g3
NtRp2037
(dp2038
g24
(lp2039
(lp2040
(g27
I180
g28
S'generate_fake_data()'
tp2041
a(g30
I119
g31
S'lat_model = LocallyLinearEvolution(LatParsDict, xdim)'
tp2042
a(g33
I58
g34
S'self.QChol = Tnla.matrix_inverse(self.QInvChol)'
tp2043
aasbsg36
Nsg37
g1
(g38
g3
NtRp2044
(dp2045
g41
(lp2046
g1896
asg20
g1
(g21
g3
NtRp2047
sg80
(lp2048
g2034
asg82
g84
sbsg68
g1911
sbsbsS'Rate'
p2049
g1
(g14
g3
NtRp2050
(dp2051
g17
S'auto_371'
p2052
sg19
I0
sg20
g1
(g21
g3
NtRp2053
(dp2054
g24
(lp2055
(lp2056
(g27
I180
g28
S'generate_fake_data()'
tp2057
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2058
a(S'/Users/danielhernandez/Work/time_series/vae_nlds_rec_algo_v2/ObservationModels.py'
p2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2060
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2061
a(g361
I124
g362
S'return self.nonlinearity(activation)'
tp2062
a(S'/Users/danielhernandez/anaconda/lib/python2.7/site-packages/lasagne/nonlinearities.py'
p2063
I286
S'softplus'
p2064
S'return theano.tensor.nnet.softplus(x)'
tp2065
aasbsg36
Nsg37
g1
(g38
g3
NtRp2066
(dp2067
g41
(lp2068
g1
(g14
g3
NtRp2069
(dp2070
g17
S'auto_368'
p2071
sg19
I0
sg20
g1
(g21
g3
NtRp2072
(dp2073
g24
(lp2074
(lp2075
(g27
I180
g28
S'generate_fake_data()'
tp2076
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2077
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2078
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2079
a(g361
I123
g362
S'activation = activation + self.b'
tp2080
aasbsg36
Nsg37
g1
(g38
g3
NtRp2081
(dp2082
g41
(lp2083
g1
(g14
g3
NtRp2084
(dp2085
g17
S'auto_362'
p2086
sg19
I0
sg20
g1
(g21
g3
NtRp2087
(dp2088
g24
(lp2089
(lp2090
(g27
I180
g28
S'generate_fake_data()'
tp2091
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2092
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2093
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2094
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2095
aasbsg36
Nsg37
g1
(g38
g3
NtRp2096
(dp2097
g41
(lp2098
g1
(g14
g3
NtRp2099
(dp2100
g17
S'auto_349'
p2101
sg19
I0
sg20
g1
(g21
g3
NtRp2102
(dp2103
g24
(lp2104
(lp2105
(g27
I180
g28
S'generate_fake_data()'
tp2106
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2107
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2108
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2109
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2110
aasbsg36
Nsg37
g1
(g38
g3
NtRp2111
(dp2112
g41
(lp2113
g1
(g14
g3
NtRp2114
(dp2115
g17
S'auto_342'
p2116
sg19
I0
sg20
g1
(g21
g3
NtRp2117
(dp2118
g24
(lp2119
(lp2120
(g27
I180
g28
S'generate_fake_data()'
tp2121
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2122
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2123
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2124
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2125
aasbsg36
Nsg37
g1
(g38
g3
NtRp2126
(dp2127
g41
(lp2128
g1
(g14
g3
NtRp2129
(dp2130
g17
S'auto_286'
p2131
sg19
I0
sg20
g1
(g21
g3
NtRp2132
(dp2133
g24
(lp2134
(lp2135
(g27
I180
g28
S'generate_fake_data()'
tp2136
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2137
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2138
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2139
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2140
aasbsg36
Nsg37
g1
(g38
g3
NtRp2141
(dp2142
g41
(lp2143
g188
asg20
g1
(g21
g3
NtRp2144
sg80
(lp2145
g2129
asg82
g1
(g731
g3
NtRp2146
(dp2147
g734
(I00
I00
I00
tp2148
sg735
(lp2149
I0
aI1
aI2
asg737
(lp2150
sg739
(lp2151
sg741
I01
sg742
(I0
I1
I2
tp2152
sg744
(dp2153
I0
(lp2154
I0
assbsbsg68
g1
(g69
g3
NtRp2155
(dp2156
g72
(I00
I00
I00
tp2157
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp2158
(dp2159
g17
S'auto_337'
p2160
sg19
I0
sg20
g1
(g21
g3
NtRp2161
(dp2162
g24
(lp2163
(lp2164
(g27
I180
g28
S'generate_fake_data()'
tp2165
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2166
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2167
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2168
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2169
aasbsg36
Nsg37
g1
(g38
g3
NtRp2170
(dp2171
g41
(lp2172
g1
(g14
g3
NtRp2173
(dp2174
g17
S'auto_328'
p2175
sg19
I0
sg20
g1
(g21
g3
NtRp2176
(dp2177
g24
(lp2178
(lp2179
(g27
I180
g28
S'generate_fake_data()'
tp2180
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2181
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2182
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2183
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2184
aasbsg36
Nsg37
g1
(g38
g3
NtRp2185
(dp2186
g41
(lp2187
g1
(g14
g3
NtRp2188
(dp2189
g17
S'auto_321'
p2190
sg19
I0
sg20
g1
(g21
g3
NtRp2191
(dp2192
g24
(lp2193
(lp2194
(g27
I180
g28
S'generate_fake_data()'
tp2195
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2196
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2197
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2198
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2199
aasbsg36
Nsg37
g1
(g38
g3
NtRp2200
(dp2201
g41
(lp2202
g519
ag1
(g14
g3
NtRp2203
(dp2204
g17
S'auto_316'
p2205
sg19
I0
sg20
g1
(g21
g3
NtRp2206
(dp2207
g24
(lp2208
(lp2209
(g27
I180
g28
S'generate_fake_data()'
tp2210
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2211
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2212
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2213
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2214
aasbsg36
Nsg37
g1
(g38
g3
NtRp2215
(dp2216
g41
(lp2217
g1
(g14
g3
NtRp2218
(dp2219
g17
S'auto_314'
p2220
sg19
I0
sg20
g1
(g21
g3
NtRp2221
(dp2222
g24
(lp2223
(lp2224
(g27
I180
g28
S'generate_fake_data()'
tp2225
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2226
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2227
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2228
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2229
aasbsg36
Nsg37
g1
(g38
g3
NtRp2230
(dp2231
g41
(lp2232
g2129
asg20
g1
(g21
g3
NtRp2233
sg80
(lp2234
g2218
asg82
g129
sbsg68
g130
sbag1
(g135
g3
NtRp2235
(dp2236
g17
S'auto_315'
p2237
sg19
Nsg20
g1
(g21
g3
NtRp2238
(dp2239
g24
(lp2240
(lp2241
(g27
I180
g28
S'generate_fake_data()'
tp2242
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2243
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2244
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2245
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2246
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2247
sbasg20
g1
(g21
g3
NtRp2248
sg80
(lp2249
g2203
asg82
g1
(g154
g3
NtRp2250
(dp2251
g157
(g147
tp2252
sbsbsg68
g1
(g69
g3
NtRp2253
(dp2254
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2255
sg80
(lp2256
g2188
asg82
g569
sbsg68
g1
(g69
g3
NtRp2257
(dp2258
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp2259
(dp2260
g17
S'auto_324'
p2261
sg19
I0
sg20
g1
(g21
g3
NtRp2262
(dp2263
g24
(lp2264
(lp2265
(g27
I180
g28
S'generate_fake_data()'
tp2266
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2267
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2268
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2269
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2270
aasbsg36
Nsg37
g1
(g38
g3
NtRp2271
(dp2272
g41
(lp2273
g1
(g14
g3
NtRp2274
(dp2275
g17
S'auto_322'
p2276
sg19
I0
sg20
g1
(g21
g3
NtRp2277
(dp2278
g24
(lp2279
(lp2280
(g27
I180
g28
S'generate_fake_data()'
tp2281
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2282
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2283
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2284
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2285
aasbsg36
Nsg37
g1
(g38
g3
NtRp2286
(dp2287
g41
(lp2288
g2129
asg20
g1
(g21
g3
NtRp2289
sg80
(lp2290
g2274
asg82
g129
sbsg68
g130
sbag1
(g135
g3
NtRp2291
(dp2292
g17
S'auto_323'
p2293
sg19
Nsg20
g1
(g21
g3
NtRp2294
(dp2295
g24
(lp2296
(lp2297
(g27
I180
g28
S'generate_fake_data()'
tp2298
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2299
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2300
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2301
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2302
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp2303
sbasg20
g1
(g21
g3
NtRp2304
sg80
(lp2305
g2259
asg82
g1
(g154
g3
NtRp2306
(dp2307
g157
(g147
tp2308
sbsbsg68
g1
(g69
g3
NtRp2309
(dp2310
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2311
sg80
(lp2312
g2173
asg82
g569
sbsg68
g1
(g69
g3
NtRp2313
(dp2314
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp2315
(dp2316
g17
S'auto_305'
p2317
sg19
I0
sg20
g1
(g21
g3
NtRp2318
(dp2319
g24
(lp2320
(lp2321
(g27
I180
g28
S'generate_fake_data()'
tp2322
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2323
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2324
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2325
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2326
aasbsg36
Nsg37
g1
(g38
g3
NtRp2327
(dp2328
g41
(lp2329
g519
ag1
(g14
g3
NtRp2330
(dp2331
g17
S'auto_300'
p2332
sg19
I0
sg20
g1
(g21
g3
NtRp2333
(dp2334
g24
(lp2335
(lp2336
(g27
I180
g28
S'generate_fake_data()'
tp2337
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2338
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2339
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2340
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2341
aasbsg36
Nsg37
g1
(g38
g3
NtRp2342
(dp2343
g41
(lp2344
g1
(g14
g3
NtRp2345
(dp2346
g17
S'auto_298'
p2347
sg19
I0
sg20
g1
(g21
g3
NtRp2348
(dp2349
g24
(lp2350
(lp2351
(g27
I180
g28
S'generate_fake_data()'
tp2352
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2353
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2354
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2355
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2356
aasbsg36
Nsg37
g1
(g38
g3
NtRp2357
(dp2358
g41
(lp2359
g2129
asg20
g1
(g21
g3
NtRp2360
sg80
(lp2361
g2345
asg82
g129
sbsg68
g130
sbag1
(g135
g3
NtRp2362
(dp2363
g17
S'auto_299'
p2364
sg19
Nsg20
g1
(g21
g3
NtRp2365
(dp2366
g24
(lp2367
(lp2368
(g27
I180
g28
S'generate_fake_data()'
tp2369
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2370
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2371
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2372
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2373
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\xff\xff\xff\xff\xff\xff\xff\xff'
tRp2374
sbasg20
g1
(g21
g3
NtRp2375
sg80
(lp2376
g2330
asg82
g1
(g154
g3
NtRp2377
(dp2378
g157
(g147
tp2379
sbsbsg68
g1
(g69
g3
NtRp2380
(dp2381
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2382
sg80
(lp2383
g2315
asg82
g569
sbsg68
g1
(g69
g3
NtRp2384
(dp2385
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2386
sg80
(lp2387
g2158
asg82
g1
(g641
g3
NtRp2388
(dp2389
g74
S'int64'
p2390
sbsbsg68
g1
(g69
g3
NtRp2391
(dp2392
g72
(I00
tp2393
sg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2394
sg80
(lp2395
g2114
asg82
g1
(g650
g3
NtRp2396
(dp2397
g653
I2
sbsbsg68
g1
(g69
g3
NtRp2398
(dp2399
g72
(I00
I00
tp2400
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp2401
(dp2402
g17
S'auto_348'
p2403
sg19
I0
sg20
g1
(g21
g3
NtRp2404
(dp2405
g24
(lp2406
(lp2407
(g27
I180
g28
S'generate_fake_data()'
tp2408
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2409
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2410
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2411
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2412
aasbsg36
Nsg37
g1
(g38
g3
NtRp2413
(dp2414
g41
(lp2415
g1
(g14
g3
NtRp2416
(dp2417
g17
S'auto_287'
p2418
sg19
I0
sg20
g1
(g21
g3
NtRp2419
(dp2420
g24
(lp2421
(lp2422
(g27
I180
g28
S'generate_fake_data()'
tp2423
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2424
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2425
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2426
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2427
aasbsg36
Nsg37
g1
(g38
g3
NtRp2428
(dp2429
g41
(lp2430
g1
(g43
g3
NtRp2431
(dp2432
g17
S'auto_283'
p2433
sg19
Nsg20
g1
(g21
g3
NtRp2434
(dp2435
g24
(lp2436
(lp2437
(g27
I180
g28
S'generate_fake_data()'
tp2438
a(g30
I126
g31
S'genNNMuY = lasagne.layers.DenseLayer(genNNMuY, ydim, nonlinearity=genObsnl[obs], W=lasagne.init.Orthogonal(), num_leading_axes=2)'
tp2439
a(g667
I103
g34
S'self.W = self.add_param(W, (num_inputs, num_units), name="W")'
tp2440
a(g669
I234
g670
S'param = utils.create_param(spec, shape, name)'
tp2441
a(g672
I355
g673
S'spec = theano.shared(spec, broadcastable=bcast)'
tp2442
aasbsg54
g1
(g55
g3
NtRp2443
(dp2444
g36
Nsg59
(lp2445
g61
(g62
(I0
tS'b'
tRp2446
(I1
(I2
I10
tg65
I00
S'U#\x1f\x06;\xc2\xc9\xbf\x9e\xdbN0~\x85\xc7?\xe9\x96\x11\x9c\xfd.\xd1?\x03\xcd\x16Vh\x1b\xc3\xbf\xb6\xb0\x96\xf1:\xdf\xc6\xbf\x8c\x1fP\xff\xb4=\xe3?\xaciT\xbc\x86$\xe1\xbfO[c+\x9d?\xc1?>\x11A\xf5U^\xd6\xbf\xdb,\x91\t\xb4Y\xba\xbf\x98\xd0aE\x1d\x99\xc4\xbf\xb8;\x91}\x8fa\xc9\xbf\x7f\xcb\xb9\x1f\xaa\x13\xb2?|\xd0%\x98\xce\xe3\xdc?\xd3\xeb=\x1aq\xeb\xe5?\xac\xf2\xfd\x07\xaf\x04\xb6?\x103B\x99vu\x84?\x97\xf5\xc9\xca\xe3\xec\xc6?\xbb\xfb\xf5\n`\xe1\xc5\xbfr\xdc\xfcDg\xc0\xdb\xbf'
tbasg66
I00
sg67
I00
sg68
g1
(g69
g3
NtRp2447
(dp2448
g72
(I00
I00
tp2449
sg74
S'float64'
p2450
sg76
g65
sg77
I00
sg36
Nsbsg78
Nsbsg36
S'W'
sg37
Nsg68
g2447
sbasg20
g1
(g21
g3
NtRp2451
sg80
(lp2452
g2416
asg82
g1
(g731
g3
NtRp2453
(dp2454
g734
(I00
I00
tp2455
sg735
(lp2456
g150
(g134
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2457
aI1
asg737
(lp2458
sg739
(lp2459
sg741
I01
sg742
(g2457
I1
tp2460
sg744
(dp2461
I0
(lp2462
I0
assbsbsg68
g1
(g69
g3
NtRp2463
(dp2464
g72
(I00
I00
tp2465
sg74
g2450
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp2466
(dp2467
g17
S'auto_343'
p2468
sg19
I0
sg20
g1
(g21
g3
NtRp2469
(dp2470
g24
(lp2471
(lp2472
(g27
I180
g28
S'generate_fake_data()'
tp2473
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2474
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2475
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2476
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2477
aasbsg36
Nsg37
g1
(g38
g3
NtRp2478
(dp2479
g41
(lp2480
g1
(g14
g3
NtRp2481
(dp2482
g17
S'auto_313'
p2483
sg19
I0
sg20
g1
(g21
g3
NtRp2484
(dp2485
g24
(lp2486
(lp2487
(g27
I180
g28
S'generate_fake_data()'
tp2488
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2489
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2490
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2491
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2492
aasbsg36
Nsg37
g1
(g38
g3
NtRp2493
(dp2494
g41
(lp2495
g519
ag1
(g14
g3
NtRp2496
(dp2497
g17
S'auto_308'
p2498
sg19
I0
sg20
g1
(g21
g3
NtRp2499
(dp2500
g24
(lp2501
(lp2502
(g27
I180
g28
S'generate_fake_data()'
tp2503
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2504
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2505
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2506
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2507
aasbsg36
Nsg37
g1
(g38
g3
NtRp2508
(dp2509
g41
(lp2510
g1
(g14
g3
NtRp2511
(dp2512
g17
S'auto_306'
p2513
sg19
I0
sg20
g1
(g21
g3
NtRp2514
(dp2515
g24
(lp2516
(lp2517
(g27
I180
g28
S'generate_fake_data()'
tp2518
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2519
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2520
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2521
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2522
aasbsg36
Nsg37
g1
(g38
g3
NtRp2523
(dp2524
g41
(lp2525
g2416
asg20
g1
(g21
g3
NtRp2526
sg80
(lp2527
g2511
asg82
g129
sbsg68
g130
sbag1
(g135
g3
NtRp2528
(dp2529
g17
S'auto_307'
p2530
sg19
Nsg20
g1
(g21
g3
NtRp2531
(dp2532
g24
(lp2533
(lp2534
(g27
I180
g28
S'generate_fake_data()'
tp2535
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2536
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2537
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2538
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2539
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2540
sbasg20
g1
(g21
g3
NtRp2541
sg80
(lp2542
g2496
asg82
g1
(g154
g3
NtRp2543
(dp2544
g157
(g147
tp2545
sbsbsg68
g1
(g69
g3
NtRp2546
(dp2547
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2548
sg80
(lp2549
g2481
asg82
g569
sbsg68
g1
(g69
g3
NtRp2550
(dp2551
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp2552
(dp2553
g17
S'auto_336'
p2554
sg19
I0
sg20
g1
(g21
g3
NtRp2555
(dp2556
g24
(lp2557
(lp2558
(g27
I180
g28
S'generate_fake_data()'
tp2559
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2560
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2561
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2562
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2563
aasbsg36
Nsg37
g1
(g38
g3
NtRp2564
(dp2565
g41
(lp2566
g519
ag1
(g14
g3
NtRp2567
(dp2568
g17
S'auto_331'
p2569
sg19
I0
sg20
g1
(g21
g3
NtRp2570
(dp2571
g24
(lp2572
(lp2573
(g27
I180
g28
S'generate_fake_data()'
tp2574
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2575
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2576
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2577
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2578
aasbsg36
Nsg37
g1
(g38
g3
NtRp2579
(dp2580
g41
(lp2581
g1
(g14
g3
NtRp2582
(dp2583
g17
S'auto_329'
p2584
sg19
I0
sg20
g1
(g21
g3
NtRp2585
(dp2586
g24
(lp2587
(lp2588
(g27
I180
g28
S'generate_fake_data()'
tp2589
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2590
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2591
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2592
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2593
aasbsg36
Nsg37
g1
(g38
g3
NtRp2594
(dp2595
g41
(lp2596
g2416
asg20
g1
(g21
g3
NtRp2597
sg80
(lp2598
g2582
asg82
g129
sbsg68
g130
sbag1
(g135
g3
NtRp2599
(dp2600
g17
S'auto_330'
p2601
sg19
Nsg20
g1
(g21
g3
NtRp2602
(dp2603
g24
(lp2604
(lp2605
(g27
I180
g28
S'generate_fake_data()'
tp2606
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2607
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2608
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2609
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2610
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\xff\xff\xff\xff\xff\xff\xff\xff'
tRp2611
sbasg20
g1
(g21
g3
NtRp2612
sg80
(lp2613
g2567
asg82
g1
(g154
g3
NtRp2614
(dp2615
g157
(g147
tp2616
sbsbsg68
g1
(g69
g3
NtRp2617
(dp2618
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2619
sg80
(lp2620
g2552
asg82
g569
sbsg68
g1
(g69
g3
NtRp2621
(dp2622
g72
(tsg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2623
sg80
(lp2624
g2466
asg82
g1
(g641
g3
NtRp2625
(dp2626
g74
S'int64'
p2627
sbsbsg68
g1
(g69
g3
NtRp2628
(dp2629
g72
(I00
tp2630
sg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2631
sg80
(lp2632
g2401
asg82
g1
(g650
g3
NtRp2633
(dp2634
g653
I2
sbsbsg68
g1
(g69
g3
NtRp2635
(dp2636
g72
(I00
I00
tp2637
sg74
g2450
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2638
sg80
(lp2639
g2099
asg82
g687
sbsg68
g1
(g69
g3
NtRp2640
(dp2641
g72
(I00
I00
tp2642
sg74
S'float64'
p2643
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp2644
(dp2645
g17
S'auto_297'
p2646
sg19
I0
sg20
g1
(g21
g3
NtRp2647
(dp2648
g24
(lp2649
(lp2650
(g27
I180
g28
S'generate_fake_data()'
tp2651
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2652
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2653
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2654
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2655
aasbsg36
Nsg37
g1
(g38
g3
NtRp2656
(dp2657
g41
(lp2658
g1
(g518
g3
NtRp2659
(dp2660
g17
S'auto_296'
p2661
sg19
Nsg20
g1
(g21
g3
NtRp2662
(dp2663
g24
(lp2664
(lp2665
(g27
I180
g28
S'generate_fake_data()'
tp2666
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2667
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2668
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2669
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2670
aasg529
Nsbsg36
Nsg530
I01
sg68
g1
(g69
g3
NtRp2671
(dp2672
g72
(tsg74
S'int8'
p2673
sg76
g534
sg77
I00
sg36
Nsbsg149
g61
(g62
(I0
tS'b'
tRp2674
(I1
(tg534
I00
S'\x00'
tbsbag1
(g14
g3
NtRp2675
(dp2676
g17
S'auto_291'
p2677
sg19
I0
sg20
g1
(g21
g3
NtRp2678
(dp2679
g24
(lp2680
(lp2681
(g27
I180
g28
S'generate_fake_data()'
tp2682
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2683
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2684
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2685
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2686
aasbsg36
Nsg37
g1
(g38
g3
NtRp2687
(dp2688
g41
(lp2689
g1
(g14
g3
NtRp2690
(dp2691
g17
S'auto_288'
p2692
sg19
I0
sg20
g1
(g21
g3
NtRp2693
(dp2694
g24
(lp2695
(lp2696
(g27
I180
g28
S'generate_fake_data()'
tp2697
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2698
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2699
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2700
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2701
aasbsg36
Nsg37
g1
(g38
g3
NtRp2702
(dp2703
g41
(lp2704
g2129
asg20
g1
(g21
g3
NtRp2705
sg80
(lp2706
g2690
asg82
g129
sbsg68
g130
sbag1
(g135
g3
NtRp2707
(dp2708
g17
S'auto_289'
p2709
sg19
Nsg20
g1
(g21
g3
NtRp2710
(dp2711
g24
(lp2712
(lp2713
(g27
I180
g28
S'generate_fake_data()'
tp2714
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2715
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2716
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2717
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2718
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\x00\x00\x00\x00\x00\x00\x00\x00'
tRp2719
sbag1
(g135
g3
NtRp2720
(dp2721
g17
S'auto_290'
p2722
sg19
Nsg20
g1
(g21
g3
NtRp2723
(dp2724
g24
(lp2725
(lp2726
(g27
I180
g28
S'generate_fake_data()'
tp2727
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2728
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2729
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2730
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2731
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp2732
sbasg20
g1
(g21
g3
NtRp2733
sg80
(lp2734
g2675
asg82
g1
(g154
g3
NtRp2735
(dp2736
g157
(g471
(g147
g147
NtRp2737
tp2738
sbsbsg68
g1
(g69
g3
NtRp2739
(dp2740
g72
(I00
tp2741
sg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp2742
(dp2743
g17
S'auto_295'
p2744
sg19
I0
sg20
g1
(g21
g3
NtRp2745
(dp2746
g24
(lp2747
(lp2748
(g27
I180
g28
S'generate_fake_data()'
tp2749
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2750
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2751
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2752
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2753
aasbsg36
Nsg37
g1
(g38
g3
NtRp2754
(dp2755
g41
(lp2756
g1
(g14
g3
NtRp2757
(dp2758
g17
S'auto_292'
p2759
sg19
I0
sg20
g1
(g21
g3
NtRp2760
(dp2761
g24
(lp2762
(lp2763
(g27
I180
g28
S'generate_fake_data()'
tp2764
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2765
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2766
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2767
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2768
aasbsg36
Nsg37
g1
(g38
g3
NtRp2769
(dp2770
g41
(lp2771
g2416
asg20
g1
(g21
g3
NtRp2772
sg80
(lp2773
g2757
asg82
g129
sbsg68
g130
sbag1
(g135
g3
NtRp2774
(dp2775
g17
S'auto_293'
p2776
sg19
Nsg20
g1
(g21
g3
NtRp2777
(dp2778
g24
(lp2779
(lp2780
(g27
I180
g28
S'generate_fake_data()'
tp2781
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2782
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2783
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2784
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2785
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\x01\x00\x00\x00\x00\x00\x00\x00'
tRp2786
sbag1
(g135
g3
NtRp2787
(dp2788
g17
S'auto_294'
p2789
sg19
Nsg20
g1
(g21
g3
NtRp2790
(dp2791
g24
(lp2792
(lp2793
(g27
I180
g28
S'generate_fake_data()'
tp2794
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2795
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2796
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2797
a(g361
I121
g362
S'activation = T.dot(input, self.W)'
tp2798
aasbsg36
Nsg68
g147
sg149
g150
(g134
S'\x02\x00\x00\x00\x00\x00\x00\x00'
tRp2799
sbasg20
g1
(g21
g3
NtRp2800
sg80
(lp2801
g2742
asg82
g1
(g154
g3
NtRp2802
(dp2803
g157
(g471
(g147
g147
NtRp2804
tp2805
sbsbsg68
g1
(g69
g3
NtRp2806
(dp2807
g72
(I00
tp2808
sg74
g133
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2809
sg80
(lp2810
g2644
asg82
g1
(ctheano.tensor.basic
Join
p2811
g3
NtRp2812
(dp2813
S'view'
p2814
I-1
sbsbsg68
g1
(g69
g3
NtRp2815
(dp2816
g72
(I00
tp2817
sg74
S'int64'
p2818
sg76
g134
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2819
sg80
(lp2820
g2084
asg82
g1
(g650
g3
NtRp2821
(dp2822
g653
I3
sbsbsg68
g1
(g69
g3
NtRp2823
(dp2824
g72
(I00
I00
I00
tp2825
sg74
g2643
sg76
g65
sg77
I00
sg36
Nsbsbag1
(g14
g3
NtRp2826
(dp2827
g17
S'auto_367'
p2828
sg19
I0
sg20
g1
(g21
g3
NtRp2829
(dp2830
g24
(lp2831
(lp2832
(g27
I180
g28
S'generate_fake_data()'
tp2833
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2834
a(g2059
I59
g34
S'self.Rate = lasagne.layers.get_output(self.NNMuY, self.X) if self.is_out_positive else T.exp(lasagne.layers.get_output(self.NNMuY, self.X))'
tp2835
a(g358
I191
g359
S'all_outputs[layer] = layer.get_output_for(layer_inputs, **kwargs)'
tp2836
a(g361
I123
g362
S'activation = activation + self.b'
tp2837
aasbsg36
Nsg37
g1
(g38
g3
NtRp2838
(dp2839
g41
(lp2840
g1
(g43
g3
NtRp2841
(dp2842
g17
S'auto_284'
p2843
sg19
Nsg20
g1
(g21
g3
NtRp2844
(dp2845
g24
(lp2846
(lp2847
(g27
I180
g28
S'generate_fake_data()'
tp2848
a(g30
I126
g31
S'genNNMuY = lasagne.layers.DenseLayer(genNNMuY, ydim, nonlinearity=genObsnl[obs], W=lasagne.init.Orthogonal(), num_leading_axes=2)'
tp2849
a(g667
I108
g34
S'regularizable=False)'
tp2850
a(g669
I234
g670
S'param = utils.create_param(spec, shape, name)'
tp2851
a(g672
I355
g673
S'spec = theano.shared(spec, broadcastable=bcast)'
tp2852
aasbsg54
g1
(g55
g3
NtRp2853
(dp2854
g36
Nsg59
(lp2855
g61
(g62
(I0
tS'b'
tRp2856
(I1
(I10
tg65
I00
S'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'
tbasg66
I00
sg67
I00
sg68
g1
(g69
g3
NtRp2857
(dp2858
g72
(I00
tp2859
sg74
S'float64'
p2860
sg76
g65
sg77
I00
sg36
Nsbsg78
Nsbsg36
S'b'
sg37
Nsg68
g2857
sbasg20
g1
(g21
g3
NtRp2861
sg80
(lp2862
g2826
asg82
g1
(g731
g3
NtRp2863
(dp2864
g734
g2859
sg735
(lp2865
I0
asg737
(lp2866
I0
aI1
asg739
(lp2867
sg741
I01
sg742
(S'x'
S'x'
I0
tp2868
sg744
(dp2869
I0
(lp2870
I0
assbsbsg68
g1
(g69
g3
NtRp2871
(dp2872
g72
(I01
I01
I00
tp2873
sg74
g2860
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2874
sg80
(lp2875
g2069
asg82
g752
sbsg68
g1
(g69
g3
NtRp2876
(dp2877
g72
(I00
I00
I00
tp2878
sg74
g125
sg76
g65
sg77
I00
sg36
Nsbsbasg20
g1
(g21
g3
NtRp2879
sg80
(lp2880
g2050
asg82
g1
(g538
g3
NtRp2881
(dp2882
g36
g2064
sg543
g1
(ctheano.tensor.nnet.sigm
ScalarSoftplus
p2883
g3
NtRp2884
(dp2885
g547
ctheano.scalar.basic
upgrade_to_float
p2886
sg36
S'scalar_softplus'
p2887
sbsg551
(dp2888
sg553
Nsg555
g1
(g556
g3
NtRp2889
(dp2890
g559
I0
sg560
(dp2891
sbsg562
I00
sbsbsg68
g1
(g69
g3
NtRp2892
(dp2893
g72
(I00
I00
I00
tp2894
sg74
g125
sg76
g65
sg77
I00
sg36
NsbsbsS'is_out_positive'
p2895
I01
sS'Y'
g1
(g14
g3
NtRp2896
(dp2897
g17
S'auto_285'
p2898
sg19
Nsg20
g1
(g21
g3
NtRp2899
(dp2900
g24
(lp2901
(lp2902
(g27
I180
g28
S'generate_fake_data()'
tp2903
a(g30
I133
g31
S'gen_model = genModel[obs](ObsParsDict, ydim, xdim, lat_ev_model=lat_model)'
tp2904
a(g2059
I37
g34
S"self.Y = Y = T.tensor3('Y') if Y is None else Y"
tp2905
aasbsg36
S'Y'
sg37
Nsg68
g1
(g69
g3
NtRp2906
(dp2907
g72
(I00
I00
I00
tp2908
sg74
g125
sg76
g65
sg77
I00
sg36
NsbsbsS'X'
g188
sS'NNMuY_W'
p2909
F1
sS'NNMuY_b'
p2910
F1
sS'NNMuY'
p2911
g1
(g1951
g3
NtRp2912
(dp2913
S'b'
g2841
sg36
Nsg1955
clasagne.nonlinearities
softplus
p2914
sg1957
I10
sg1958
(NNI2
tp2915
sg1960
g1203
((lp2916
(lp2917
g2431
ag1963
((lp2918
g1965
ag1966
atRp2919
aa(lp2920
g2841
ag1963
((lp2921
g1965
atRp2922
aatRp2923
sg1972
g1
(g1986
g3
NtRp2924
(dp2925
g1989
g2915
sg1960
g1203
((ltRp2926
sg36
Nsg1992
g1
(g14
g3
NtRp2927
(dp2928
g17
S'auto_282'
p2929
sg19
Nsg20
g1
(g21
g3
NtRp2930
(dp2931
g24
(lp2932
(lp2933
(g27
I180
g28
S'generate_fake_data()'
tp2934
a(g30
I124
g31
S'genNNMuY = lasagne.layers.InputLayer((None, None, xdim))'
tp2935
a(g2003
I63
g34
S'input_var = input_var_type(var_name)'
tp2936
aasbsg36
S'input'
p2937
sg37
Nsg68
g1
(g69
g3
NtRp2938
(dp2939
g72
(I00
I00
I00
tp2940
sg74
g125
sg76
g65
sg77
I00
sg36
NsbsbsbsS'W'
g2431
sg2009
I2
sg2010
(lp2941
sbsb.